#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class empty(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('empty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class network_address(object):
    """
    Attributes:
     - ip
     - port
    """


    def __init__(self, ip=None, port=None,):
        self.ip = ip
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('network_address')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I16, 2)
            oprot.writeI16(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class task_status(object):
    """
    Attributes:
     - task_id
     - status
    """


    def __init__(self, task_id=None, status=None,):
        self.task_id = task_id
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('task_status')
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 1)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 2)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_id is None:
            raise TProtocolException(message='Required field task_id is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class peer_node_info(object):
    """
    Attributes:
     - peer_node_id
     - core_version
     - protocol_version
     - live_time_stamp
     - addr
     - service_list
    """


    def __init__(self, peer_node_id=None, core_version=None, protocol_version=None, live_time_stamp=None, addr=None, service_list=None,):
        self.peer_node_id = peer_node_id
        self.core_version = core_version
        self.protocol_version = protocol_version
        self.live_time_stamp = live_time_stamp
        self.addr = addr
        self.service_list = service_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.peer_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.core_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.live_time_stamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.addr = network_address()
                    self.addr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.service_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.service_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('peer_node_info')
        if self.peer_node_id is not None:
            oprot.writeFieldBegin('peer_node_id', TType.STRING, 1)
            oprot.writeString(self.peer_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.peer_node_id)
            oprot.writeFieldEnd()
        if self.core_version is not None:
            oprot.writeFieldBegin('core_version', TType.I32, 2)
            oprot.writeI32(self.core_version)
            oprot.writeFieldEnd()
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 3)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.live_time_stamp is not None:
            oprot.writeFieldBegin('live_time_stamp', TType.I32, 4)
            oprot.writeI32(self.live_time_stamp)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRUCT, 5)
            self.addr.write(oprot)
            oprot.writeFieldEnd()
        if self.service_list is not None:
            oprot.writeFieldBegin('service_list', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.service_list))
            for iter6 in self.service_list:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.peer_node_id is None:
            raise TProtocolException(message='Required field peer_node_id is unset!')
        if self.core_version is None:
            raise TProtocolException(message='Required field core_version is unset!')
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.live_time_stamp is None:
            raise TProtocolException(message='Required field live_time_stamp is unset!')
        if self.addr is None:
            raise TProtocolException(message='Required field addr is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ver_req_body(object):
    """
    Attributes:
     - node_id
     - core_version
     - protocol_version
     - time_stamp
     - addr_me
     - addr_you
     - start_height
    """


    def __init__(self, node_id=None, core_version=None, protocol_version=None, time_stamp=None, addr_me=None, addr_you=None, start_height=None,):
        self.node_id = node_id
        self.core_version = core_version
        self.protocol_version = protocol_version
        self.time_stamp = time_stamp
        self.addr_me = addr_me
        self.addr_you = addr_you
        self.start_height = start_height

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.core_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.time_stamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.addr_me = network_address()
                    self.addr_me.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.addr_you = network_address()
                    self.addr_you.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.start_height = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ver_req_body')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.core_version is not None:
            oprot.writeFieldBegin('core_version', TType.I32, 2)
            oprot.writeI32(self.core_version)
            oprot.writeFieldEnd()
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 3)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.time_stamp is not None:
            oprot.writeFieldBegin('time_stamp', TType.I64, 4)
            oprot.writeI64(self.time_stamp)
            oprot.writeFieldEnd()
        if self.addr_me is not None:
            oprot.writeFieldBegin('addr_me', TType.STRUCT, 5)
            self.addr_me.write(oprot)
            oprot.writeFieldEnd()
        if self.addr_you is not None:
            oprot.writeFieldBegin('addr_you', TType.STRUCT, 6)
            self.addr_you.write(oprot)
            oprot.writeFieldEnd()
        if self.start_height is not None:
            oprot.writeFieldBegin('start_height', TType.I64, 7)
            oprot.writeI64(self.start_height)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_id is None:
            raise TProtocolException(message='Required field node_id is unset!')
        if self.core_version is None:
            raise TProtocolException(message='Required field core_version is unset!')
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.time_stamp is None:
            raise TProtocolException(message='Required field time_stamp is unset!')
        if self.addr_me is None:
            raise TProtocolException(message='Required field addr_me is unset!')
        if self.addr_you is None:
            raise TProtocolException(message='Required field addr_you is unset!')
        if self.start_height is None:
            raise TProtocolException(message='Required field start_height is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ver_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = ver_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ver_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ver_resp_body(object):
    """
    Attributes:
     - node_id
     - core_version
     - protocol_version
    """


    def __init__(self, node_id=None, core_version=None, protocol_version=None,):
        self.node_id = node_id
        self.core_version = core_version
        self.protocol_version = protocol_version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.core_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ver_resp_body')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.core_version is not None:
            oprot.writeFieldBegin('core_version', TType.I32, 2)
            oprot.writeI32(self.core_version)
            oprot.writeFieldEnd()
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 3)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_id is None:
            raise TProtocolException(message='Required field node_id is unset!')
        if self.core_version is None:
            raise TProtocolException(message='Required field core_version is unset!')
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ver_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = ver_resp_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ver_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class shake_hand_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = empty()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shake_hand_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class shake_hand_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = empty()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shake_hand_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_peer_nodes_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = empty()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_peer_nodes_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_peer_nodes_resp_body(object):
    """
    Attributes:
     - peer_nodes_list
    """


    def __init__(self, peer_nodes_list=None,):
        self.peer_nodes_list = peer_nodes_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.peer_nodes_list = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = peer_node_info()
                        _elem12.read(iprot)
                        self.peer_nodes_list.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_peer_nodes_resp_body')
        if self.peer_nodes_list is not None:
            oprot.writeFieldBegin('peer_nodes_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.peer_nodes_list))
            for iter13 in self.peer_nodes_list:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.peer_nodes_list is None:
            raise TProtocolException(message='Required field peer_nodes_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_peer_nodes_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = get_peer_nodes_resp_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_peer_nodes_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class peer_nodes_broadcast_req_body(object):
    """
    Attributes:
     - peer_nodes_list
    """


    def __init__(self, peer_nodes_list=None,):
        self.peer_nodes_list = peer_nodes_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.peer_nodes_list = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = peer_node_info()
                        _elem19.read(iprot)
                        self.peer_nodes_list.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('peer_nodes_broadcast_req_body')
        if self.peer_nodes_list is not None:
            oprot.writeFieldBegin('peer_nodes_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.peer_nodes_list))
            for iter20 in self.peer_nodes_list:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.peer_nodes_list is None:
            raise TProtocolException(message='Required field peer_nodes_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class peer_nodes_broadcast_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = peer_nodes_broadcast_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('peer_nodes_broadcast_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class start_training_req_body(object):
    """
    Attributes:
     - task_id
     - select_mode
     - master
     - peer_nodes_list
     - server_specification
     - server_count
     - training_engine
     - code_dir
     - entry_file
     - data_dir
     - checkpoint_dir
     - hyper_parameters
    """


    def __init__(self, task_id=None, select_mode=None, master=None, peer_nodes_list=None, server_specification=None, server_count=None, training_engine=None, code_dir=None, entry_file=None, data_dir=None, checkpoint_dir=None, hyper_parameters=None,):
        self.task_id = task_id
        self.select_mode = select_mode
        self.master = master
        self.peer_nodes_list = peer_nodes_list
        self.server_specification = server_specification
        self.server_count = server_count
        self.training_engine = training_engine
        self.code_dir = code_dir
        self.entry_file = entry_file
        self.data_dir = data_dir
        self.checkpoint_dir = checkpoint_dir
        self.hyper_parameters = hyper_parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.select_mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.master = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.peer_nodes_list = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.peer_nodes_list.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.server_specification = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.server_count = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.training_engine = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.code_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.entry_file = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.data_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.checkpoint_dir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.hyper_parameters = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_training_req_body')
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 1)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.select_mode is not None:
            oprot.writeFieldBegin('select_mode', TType.BYTE, 2)
            oprot.writeByte(self.select_mode)
            oprot.writeFieldEnd()
        if self.master is not None:
            oprot.writeFieldBegin('master', TType.STRING, 3)
            oprot.writeString(self.master.encode('utf-8') if sys.version_info[0] == 2 else self.master)
            oprot.writeFieldEnd()
        if self.peer_nodes_list is not None:
            oprot.writeFieldBegin('peer_nodes_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.peer_nodes_list))
            for iter27 in self.peer_nodes_list:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.server_specification is not None:
            oprot.writeFieldBegin('server_specification', TType.STRING, 5)
            oprot.writeString(self.server_specification.encode('utf-8') if sys.version_info[0] == 2 else self.server_specification)
            oprot.writeFieldEnd()
        if self.server_count is not None:
            oprot.writeFieldBegin('server_count', TType.STRING, 6)
            oprot.writeString(self.server_count.encode('utf-8') if sys.version_info[0] == 2 else self.server_count)
            oprot.writeFieldEnd()
        if self.training_engine is not None:
            oprot.writeFieldBegin('training_engine', TType.I32, 7)
            oprot.writeI32(self.training_engine)
            oprot.writeFieldEnd()
        if self.code_dir is not None:
            oprot.writeFieldBegin('code_dir', TType.STRING, 8)
            oprot.writeString(self.code_dir.encode('utf-8') if sys.version_info[0] == 2 else self.code_dir)
            oprot.writeFieldEnd()
        if self.entry_file is not None:
            oprot.writeFieldBegin('entry_file', TType.STRING, 9)
            oprot.writeString(self.entry_file.encode('utf-8') if sys.version_info[0] == 2 else self.entry_file)
            oprot.writeFieldEnd()
        if self.data_dir is not None:
            oprot.writeFieldBegin('data_dir', TType.STRING, 10)
            oprot.writeString(self.data_dir.encode('utf-8') if sys.version_info[0] == 2 else self.data_dir)
            oprot.writeFieldEnd()
        if self.checkpoint_dir is not None:
            oprot.writeFieldBegin('checkpoint_dir', TType.STRING, 11)
            oprot.writeString(self.checkpoint_dir.encode('utf-8') if sys.version_info[0] == 2 else self.checkpoint_dir)
            oprot.writeFieldEnd()
        if self.hyper_parameters is not None:
            oprot.writeFieldBegin('hyper_parameters', TType.STRING, 12)
            oprot.writeString(self.hyper_parameters.encode('utf-8') if sys.version_info[0] == 2 else self.hyper_parameters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_id is None:
            raise TProtocolException(message='Required field task_id is unset!')
        if self.select_mode is None:
            raise TProtocolException(message='Required field select_mode is unset!')
        if self.peer_nodes_list is None:
            raise TProtocolException(message='Required field peer_nodes_list is unset!')
        if self.training_engine is None:
            raise TProtocolException(message='Required field training_engine is unset!')
        if self.code_dir is None:
            raise TProtocolException(message='Required field code_dir is unset!')
        if self.entry_file is None:
            raise TProtocolException(message='Required field entry_file is unset!')
        if self.data_dir is None:
            raise TProtocolException(message='Required field data_dir is unset!')
        if self.checkpoint_dir is None:
            raise TProtocolException(message='Required field checkpoint_dir is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class start_training_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = start_training_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_training_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stop_training_req_body(object):
    """
    Attributes:
     - task_id
    """


    def __init__(self, task_id=None,):
        self.task_id = task_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stop_training_req_body')
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 1)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_id is None:
            raise TProtocolException(message='Required field task_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stop_training_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = stop_training_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stop_training_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class list_training_req_body(object):
    """
    Attributes:
     - task_list
    """


    def __init__(self, task_list=None,):
        self.task_list = task_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.task_list = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.task_list.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_training_req_body')
        if self.task_list is not None:
            oprot.writeFieldBegin('task_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.task_list))
            for iter34 in self.task_list:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_list is None:
            raise TProtocolException(message='Required field task_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class list_training_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = list_training_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_training_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class list_training_resp_body(object):
    """
    Attributes:
     - task_status_list
    """


    def __init__(self, task_status_list=None,):
        self.task_status_list = task_status_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.task_status_list = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = task_status()
                        _elem40.read(iprot)
                        self.task_status_list.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_training_resp_body')
        if self.task_status_list is not None:
            oprot.writeFieldBegin('task_status_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.task_status_list))
            for iter41 in self.task_status_list:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_status_list is None:
            raise TProtocolException(message='Required field task_status_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class list_training_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = list_training_resp_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_training_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class logs_req_body(object):
    """
    Attributes:
     - task_id
     - peer_nodes_list
     - head_or_tail
     - number_of_lines
    """


    def __init__(self, task_id=None, peer_nodes_list=None, head_or_tail=None, number_of_lines=None,):
        self.task_id = task_id
        self.peer_nodes_list = peer_nodes_list
        self.head_or_tail = head_or_tail
        self.number_of_lines = number_of_lines

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.task_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.peer_nodes_list = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.peer_nodes_list.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.head_or_tail = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.number_of_lines = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logs_req_body')
        if self.task_id is not None:
            oprot.writeFieldBegin('task_id', TType.STRING, 1)
            oprot.writeString(self.task_id.encode('utf-8') if sys.version_info[0] == 2 else self.task_id)
            oprot.writeFieldEnd()
        if self.peer_nodes_list is not None:
            oprot.writeFieldBegin('peer_nodes_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.peer_nodes_list))
            for iter48 in self.peer_nodes_list:
                oprot.writeString(iter48.encode('utf-8') if sys.version_info[0] == 2 else iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.head_or_tail is not None:
            oprot.writeFieldBegin('head_or_tail', TType.BYTE, 3)
            oprot.writeByte(self.head_or_tail)
            oprot.writeFieldEnd()
        if self.number_of_lines is not None:
            oprot.writeFieldBegin('number_of_lines', TType.I16, 4)
            oprot.writeI16(self.number_of_lines)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.task_id is None:
            raise TProtocolException(message='Required field task_id is unset!')
        if self.peer_nodes_list is None:
            raise TProtocolException(message='Required field peer_nodes_list is unset!')
        if self.head_or_tail is None:
            raise TProtocolException(message='Required field head_or_tail is unset!')
        if self.number_of_lines is None:
            raise TProtocolException(message='Required field number_of_lines is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class logs_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = logs_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logs_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class peer_node_log(object):
    """
    Attributes:
     - peer_node_id
     - log_content
    """


    def __init__(self, peer_node_id=None, log_content=None,):
        self.peer_node_id = peer_node_id
        self.log_content = log_content

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.peer_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.log_content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('peer_node_log')
        if self.peer_node_id is not None:
            oprot.writeFieldBegin('peer_node_id', TType.STRING, 1)
            oprot.writeString(self.peer_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.peer_node_id)
            oprot.writeFieldEnd()
        if self.log_content is not None:
            oprot.writeFieldBegin('log_content', TType.STRING, 2)
            oprot.writeString(self.log_content.encode('utf-8') if sys.version_info[0] == 2 else self.log_content)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.peer_node_id is None:
            raise TProtocolException(message='Required field peer_node_id is unset!')
        if self.log_content is None:
            raise TProtocolException(message='Required field log_content is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class logs_resp_body(object):
    """
    Attributes:
     - log
    """


    def __init__(self, log=None,):
        self.log = log

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.log = peer_node_log()
                    self.log.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logs_resp_body')
        if self.log is not None:
            oprot.writeFieldBegin('log', TType.STRUCT, 1)
            self.log.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.log is None:
            raise TProtocolException(message='Required field log is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class logs_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = logs_resp_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logs_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class show_req_body(object):
    """
    Attributes:
     - o_node_id
     - d_node_id
     - keys
    """


    def __init__(self, o_node_id=None, d_node_id=None, keys=None,):
        self.o_node_id = o_node_id
        self.d_node_id = d_node_id
        self.keys = keys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.o_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.d_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.keys = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keys.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('show_req_body')
        if self.o_node_id is not None:
            oprot.writeFieldBegin('o_node_id', TType.STRING, 1)
            oprot.writeString(self.o_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.o_node_id)
            oprot.writeFieldEnd()
        if self.d_node_id is not None:
            oprot.writeFieldBegin('d_node_id', TType.STRING, 2)
            oprot.writeString(self.d_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.d_node_id)
            oprot.writeFieldEnd()
        if self.keys is not None:
            oprot.writeFieldBegin('keys', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.keys))
            for iter55 in self.keys:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.o_node_id is None:
            raise TProtocolException(message='Required field o_node_id is unset!')
        if self.d_node_id is None:
            raise TProtocolException(message='Required field d_node_id is unset!')
        if self.keys is None:
            raise TProtocolException(message='Required field keys is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class show_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = show_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('show_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class show_resp_body(object):
    """
    Attributes:
     - o_node_id
     - d_node_id
     - kvs
    """


    def __init__(self, o_node_id=None, d_node_id=None, kvs=None,):
        self.o_node_id = o_node_id
        self.d_node_id = d_node_id
        self.kvs = kvs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.o_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.d_node_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.kvs = {}
                    (_ktype57, _vtype58, _size56) = iprot.readMapBegin()
                    for _i60 in range(_size56):
                        _key61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val62 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.kvs[_key61] = _val62
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('show_resp_body')
        if self.o_node_id is not None:
            oprot.writeFieldBegin('o_node_id', TType.STRING, 1)
            oprot.writeString(self.o_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.o_node_id)
            oprot.writeFieldEnd()
        if self.d_node_id is not None:
            oprot.writeFieldBegin('d_node_id', TType.STRING, 2)
            oprot.writeString(self.d_node_id.encode('utf-8') if sys.version_info[0] == 2 else self.d_node_id)
            oprot.writeFieldEnd()
        if self.kvs is not None:
            oprot.writeFieldBegin('kvs', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.kvs))
            for kiter63, viter64 in self.kvs.items():
                oprot.writeString(kiter63.encode('utf-8') if sys.version_info[0] == 2 else kiter63)
                oprot.writeString(viter64.encode('utf-8') if sys.version_info[0] == 2 else viter64)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.o_node_id is None:
            raise TProtocolException(message='Required field o_node_id is unset!')
        if self.d_node_id is None:
            raise TProtocolException(message='Required field d_node_id is unset!')
        if self.kvs is None:
            raise TProtocolException(message='Required field kvs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class show_resp(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = show_resp_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('show_resp')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_service_info(object):
    """
    Attributes:
     - service_list
     - name
     - time_stamp
    """


    def __init__(self, service_list=None, name=None, time_stamp=None,):
        self.service_list = service_list
        self.name = name
        self.time_stamp = time_stamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.service_list = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.service_list.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time_stamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_service_info')
        if self.service_list is not None:
            oprot.writeFieldBegin('service_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.service_list))
            for iter71 in self.service_list:
                oprot.writeString(iter71.encode('utf-8') if sys.version_info[0] == 2 else iter71)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.time_stamp is not None:
            oprot.writeFieldBegin('time_stamp', TType.I64, 3)
            oprot.writeI64(self.time_stamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.service_list is None:
            raise TProtocolException(message='Required field service_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class service_broadcast_req_body(object):
    """
    Attributes:
     - node_service_info_map
    """


    def __init__(self, node_service_info_map=None,):
        self.node_service_info_map = node_service_info_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.node_service_info_map = {}
                    (_ktype73, _vtype74, _size72) = iprot.readMapBegin()
                    for _i76 in range(_size72):
                        _key77 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val78 = node_service_info()
                        _val78.read(iprot)
                        self.node_service_info_map[_key77] = _val78
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('service_broadcast_req_body')
        if self.node_service_info_map is not None:
            oprot.writeFieldBegin('node_service_info_map', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.node_service_info_map))
            for kiter79, viter80 in self.node_service_info_map.items():
                oprot.writeString(kiter79.encode('utf-8') if sys.version_info[0] == 2 else kiter79)
                viter80.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_service_info_map is None:
            raise TProtocolException(message='Required field node_service_info_map is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class service_broadcast_req(object):
    """
    Attributes:
     - body
    """


    def __init__(self, body=None,):
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.body = service_broadcast_req_body()
                    self.body.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('service_broadcast_req')
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRUCT, 1)
            self.body.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(empty)
empty.thrift_spec = (
)
all_structs.append(network_address)
network_address.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.I16, 'port', None, None, ),  # 2
)
all_structs.append(task_status)
task_status.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'task_id', 'UTF8', None, ),  # 1
    (2, TType.BYTE, 'status', None, None, ),  # 2
)
all_structs.append(peer_node_info)
peer_node_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'peer_node_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'core_version', None, None, ),  # 2
    (3, TType.I32, 'protocol_version', None, None, ),  # 3
    (4, TType.I32, 'live_time_stamp', None, None, ),  # 4
    (5, TType.STRUCT, 'addr', [network_address, None], None, ),  # 5
    (6, TType.LIST, 'service_list', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(ver_req_body)
ver_req_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'core_version', None, None, ),  # 2
    (3, TType.I32, 'protocol_version', None, None, ),  # 3
    (4, TType.I64, 'time_stamp', None, None, ),  # 4
    (5, TType.STRUCT, 'addr_me', [network_address, None], None, ),  # 5
    (6, TType.STRUCT, 'addr_you', [network_address, None], None, ),  # 6
    (7, TType.I64, 'start_height', None, None, ),  # 7
)
all_structs.append(ver_req)
ver_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [ver_req_body, None], None, ),  # 1
)
all_structs.append(ver_resp_body)
ver_resp_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'core_version', None, None, ),  # 2
    (3, TType.I32, 'protocol_version', None, None, ),  # 3
)
all_structs.append(ver_resp)
ver_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [ver_resp_body, None], None, ),  # 1
)
all_structs.append(shake_hand_req)
shake_hand_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [empty, None], None, ),  # 1
)
all_structs.append(shake_hand_resp)
shake_hand_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [empty, None], None, ),  # 1
)
all_structs.append(get_peer_nodes_req)
get_peer_nodes_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [empty, None], None, ),  # 1
)
all_structs.append(get_peer_nodes_resp_body)
get_peer_nodes_resp_body.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'peer_nodes_list', (TType.STRUCT, [peer_node_info, None], False), None, ),  # 1
)
all_structs.append(get_peer_nodes_resp)
get_peer_nodes_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [get_peer_nodes_resp_body, None], None, ),  # 1
)
all_structs.append(peer_nodes_broadcast_req_body)
peer_nodes_broadcast_req_body.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'peer_nodes_list', (TType.STRUCT, [peer_node_info, None], False), None, ),  # 1
)
all_structs.append(peer_nodes_broadcast_req)
peer_nodes_broadcast_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [peer_nodes_broadcast_req_body, None], None, ),  # 1
)
all_structs.append(start_training_req_body)
start_training_req_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'task_id', 'UTF8', None, ),  # 1
    (2, TType.BYTE, 'select_mode', None, None, ),  # 2
    (3, TType.STRING, 'master', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'peer_nodes_list', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'server_specification', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'server_count', 'UTF8', None, ),  # 6
    (7, TType.I32, 'training_engine', None, None, ),  # 7
    (8, TType.STRING, 'code_dir', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'entry_file', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'data_dir', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'checkpoint_dir', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'hyper_parameters', 'UTF8', None, ),  # 12
)
all_structs.append(start_training_req)
start_training_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [start_training_req_body, None], None, ),  # 1
)
all_structs.append(stop_training_req_body)
stop_training_req_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'task_id', 'UTF8', None, ),  # 1
)
all_structs.append(stop_training_req)
stop_training_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [stop_training_req_body, None], None, ),  # 1
)
all_structs.append(list_training_req_body)
list_training_req_body.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'task_list', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(list_training_req)
list_training_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [list_training_req_body, None], None, ),  # 1
)
all_structs.append(list_training_resp_body)
list_training_resp_body.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'task_status_list', (TType.STRUCT, [task_status, None], False), None, ),  # 1
)
all_structs.append(list_training_resp)
list_training_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [list_training_resp_body, None], None, ),  # 1
)
all_structs.append(logs_req_body)
logs_req_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'task_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'peer_nodes_list', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.BYTE, 'head_or_tail', None, None, ),  # 3
    (4, TType.I16, 'number_of_lines', None, None, ),  # 4
)
all_structs.append(logs_req)
logs_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [logs_req_body, None], None, ),  # 1
)
all_structs.append(peer_node_log)
peer_node_log.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'peer_node_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'log_content', 'UTF8', None, ),  # 2
)
all_structs.append(logs_resp_body)
logs_resp_body.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'log', [peer_node_log, None], None, ),  # 1
)
all_structs.append(logs_resp)
logs_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [logs_resp_body, None], None, ),  # 1
)
all_structs.append(show_req_body)
show_req_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'o_node_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'd_node_id', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'keys', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(show_req)
show_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [show_req_body, None], None, ),  # 1
)
all_structs.append(show_resp_body)
show_resp_body.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'o_node_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'd_node_id', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'kvs', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(show_resp)
show_resp.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [show_resp_body, None], None, ),  # 1
)
all_structs.append(node_service_info)
node_service_info.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'service_list', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'time_stamp', None, None, ),  # 3
)
all_structs.append(service_broadcast_req_body)
service_broadcast_req_body.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'node_service_info_map', (TType.STRING, 'UTF8', TType.STRUCT, [node_service_info, None], False), None, ),  # 1
)
all_structs.append(service_broadcast_req)
service_broadcast_req.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'body', [service_broadcast_req_body, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
