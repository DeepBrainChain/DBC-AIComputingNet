/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Preset_H
#define Preset_H

// #include <thrift/TDispatchProcessor.h>
// #include <thrift/async/TConcurrentClientSyncInfo.h>
#include <boost/asio.hpp>
#include <memory>

#include "message/preset_types.h"

namespace occ {

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4250)  // inheriting methods via dominance
#endif

class PresetIf {
public:
    virtual ~PresetIf() {}
    virtual void ping(std::string& _return) = 0;
    virtual void handleMessage(ResultStruct& _return, const Message& msg) = 0;
};

class PresetNull : virtual public PresetIf {
public:
    virtual ~PresetNull() {}
    void ping(std::string& /* _return */) { return; }
    void handleMessage(ResultStruct& /* _return */, const Message& /* msg */) {
        return;
    }
};

class Preset_ping_args {
public:
    Preset_ping_args(const Preset_ping_args&);
    Preset_ping_args& operator=(const Preset_ping_args&);
    Preset_ping_args() {}

    virtual ~Preset_ping_args() noexcept;

    bool operator==(const Preset_ping_args& /* rhs */) const { return true; }
    bool operator!=(const Preset_ping_args& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const Preset_ping_args&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

class Preset_ping_pargs {
public:
    virtual ~Preset_ping_pargs() noexcept;

    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

typedef struct _Preset_ping_result__isset {
    _Preset_ping_result__isset() : success(false) {}
    bool success : 1;
} _Preset_ping_result__isset;

class Preset_ping_result {
public:
    Preset_ping_result(const Preset_ping_result&);
    Preset_ping_result& operator=(const Preset_ping_result&);
    Preset_ping_result() : success() {}

    virtual ~Preset_ping_result() noexcept;
    std::string success;

    _Preset_ping_result__isset __isset;

    void __set_success(const std::string& val);

    bool operator==(const Preset_ping_result& rhs) const {
        if (!(success == rhs.success)) return false;
        return true;
    }
    bool operator!=(const Preset_ping_result& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const Preset_ping_result&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

typedef struct _Preset_ping_presult__isset {
    _Preset_ping_presult__isset() : success(false) {}
    bool success : 1;
} _Preset_ping_presult__isset;

class Preset_ping_presult {
public:
    virtual ~Preset_ping_presult() noexcept;
    std::string* success;

    _Preset_ping_presult__isset __isset;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
};

typedef struct _Preset_handleMessage_args__isset {
    _Preset_handleMessage_args__isset() : msg(false) {}
    bool msg : 1;
} _Preset_handleMessage_args__isset;

class Preset_handleMessage_args {
public:
    Preset_handleMessage_args(const Preset_handleMessage_args&);
    Preset_handleMessage_args& operator=(const Preset_handleMessage_args&);
    Preset_handleMessage_args() {}

    virtual ~Preset_handleMessage_args() noexcept;
    Message msg;

    _Preset_handleMessage_args__isset __isset;

    void __set_msg(const Message& val);

    bool operator==(const Preset_handleMessage_args& rhs) const {
        if (!(msg == rhs.msg)) return false;
        return true;
    }
    bool operator!=(const Preset_handleMessage_args& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const Preset_handleMessage_args&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

class Preset_handleMessage_pargs {
public:
    virtual ~Preset_handleMessage_pargs() noexcept;
    const Message* msg;

    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

typedef struct _Preset_handleMessage_result__isset {
    _Preset_handleMessage_result__isset() : success(false), ouch(false) {}
    bool success : 1;
    bool ouch : 1;
} _Preset_handleMessage_result__isset;

class Preset_handleMessage_result {
public:
    Preset_handleMessage_result(const Preset_handleMessage_result&);
    Preset_handleMessage_result& operator=(const Preset_handleMessage_result&);
    Preset_handleMessage_result() {}

    virtual ~Preset_handleMessage_result() noexcept;
    ResultStruct success;
    InvalidMessageType ouch;

    _Preset_handleMessage_result__isset __isset;

    void __set_success(const ResultStruct& val);

    void __set_ouch(const InvalidMessageType& val);

    bool operator==(const Preset_handleMessage_result& rhs) const {
        if (!(success == rhs.success)) return false;
        if (!(ouch == rhs.ouch)) return false;
        return true;
    }
    bool operator!=(const Preset_handleMessage_result& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const Preset_handleMessage_result&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
};

typedef struct _Preset_handleMessage_presult__isset {
    _Preset_handleMessage_presult__isset() : success(false), ouch(false) {}
    bool success : 1;
    bool ouch : 1;
} _Preset_handleMessage_presult__isset;

class Preset_handleMessage_presult {
public:
    virtual ~Preset_handleMessage_presult() noexcept;
    ResultStruct* success;
    InvalidMessageType ouch;

    _Preset_handleMessage_presult__isset __isset;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
};

class PresetClient : virtual public PresetIf {
public:
    PresetClient(boost::asio::io_context& io_context,
                 std::shared_ptr<::apache::thrift::protocol::TProtocol> prot);
    PresetClient(boost::asio::io_context& io_context,
                 std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                 std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot);

    bool connect(const std::string& host, uint32_t port);

    bool sendMessage();

    void receiveMessage();

private:
    void setProtocol(
        std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
        setProtocol(prot, prot);
    }
    void setProtocol(
        std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
        std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
        piprot_ = iprot;
        poprot_ = oprot;
        iprot_ = iprot.get();
        oprot_ = oprot.get();
    }

public:
    std::shared_ptr<::apache::thrift::protocol::TProtocol> getInputProtocol() {
        return piprot_;
    }
    std::shared_ptr<::apache::thrift::protocol::TProtocol> getOutputProtocol() {
        return poprot_;
    }
    void ping(std::string& _return);
    void send_ping();
    void recv_ping(std::string& _return);
    void handleMessage(ResultStruct& _return, const Message& msg);
    void send_handleMessage(const Message& msg);
    void recv_handleMessage(ResultStruct& _return);

protected:
    std::shared_ptr<::apache::thrift::protocol::TProtocol> piprot_;
    std::shared_ptr<::apache::thrift::protocol::TProtocol> poprot_;
    ::apache::thrift::protocol::TProtocol* iprot_;
    ::apache::thrift::protocol::TProtocol* oprot_;
    boost::asio::ip::tcp::socket socket_;
    std::shared_ptr<byte_buf> pibuf_;
    std::shared_ptr<byte_buf> pobuf_;
    std::string response_;
};

#ifdef _MSC_VER
#pragma warning(pop)
#endif

}  // namespace occ

#endif
