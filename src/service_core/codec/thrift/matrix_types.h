/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef matrix_TYPES_H
#define matrix_TYPES_H

#include <iosfwd>

#include "protocol.h"
#include "service_message.h"
#include "TToString.h"

using namespace matrix::core;


namespace matrix { namespace service_core {

class empty;

class network_address;

class task_status;

class peer_node_info;

class ver_req_body;

class ver_req;

class ver_resp_body;

class ver_resp;

class shake_hand_req;

class shake_hand_resp;

class get_peer_nodes_req;

class get_peer_nodes_resp_body;

class get_peer_nodes_resp;

class peer_nodes_broadcast_req_body;

class peer_nodes_broadcast_req;

class start_training_req_body;

class start_training_req;

class stop_training_req_body;

class stop_training_req;

class list_training_req_body;

class list_training_req;

class list_training_resp_body;

class list_training_resp;

class logs_req_body;

class logs_req;

class peer_node_log;

class logs_resp_body;

class logs_resp;

class show_req_body;

class show_req;

class show_resp_body;

class show_resp;

class node_service_info;

class service_broadcast_req_body;

class service_broadcast_req;


class empty : public virtual ::apache::thrift::TBase {
 public:

  empty(const empty&);
  empty& operator=(const empty&);
  empty() {
  }

  virtual ~empty() throw();

  bool operator == (const empty & /* rhs */) const
  {
    return true;
  }
  bool operator != (const empty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const empty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(empty &a, empty &b);

std::ostream& operator<<(std::ostream& out, const empty& obj);


class network_address : public virtual ::apache::thrift::TBase {
 public:

  network_address(const network_address&);
  network_address& operator=(const network_address&);
  network_address() : ip(), port(0) {
  }

  virtual ~network_address() throw();
  std::string ip;
  int16_t port;

  void __set_ip(const std::string& val);

  void __set_port(const int16_t val);

  bool operator == (const network_address & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const network_address &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const network_address & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(network_address &a, network_address &b);

std::ostream& operator<<(std::ostream& out, const network_address& obj);


class task_status : public virtual ::apache::thrift::TBase {
 public:

  task_status(const task_status&);
  task_status& operator=(const task_status&);
  task_status() : task_id(), status(0) {
  }

  virtual ~task_status() throw();
  std::string task_id;
  int8_t status;

  void __set_task_id(const std::string& val);

  void __set_status(const int8_t val);

  bool operator == (const task_status & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const task_status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const task_status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(task_status &a, task_status &b);

std::ostream& operator<<(std::ostream& out, const task_status& obj);

typedef struct _peer_node_info__isset {
  _peer_node_info__isset() : service_list(false) {}
  bool service_list :1;
} _peer_node_info__isset;

class peer_node_info : public virtual ::apache::thrift::TBase {
 public:

  peer_node_info(const peer_node_info&);
  peer_node_info& operator=(const peer_node_info&);
  peer_node_info() : peer_node_id(), core_version(0), protocol_version(0), live_time_stamp(0) {
  }

  virtual ~peer_node_info() throw();
  std::string peer_node_id;
  int32_t core_version;
  int32_t protocol_version;
  int32_t live_time_stamp;
  network_address addr;
  std::vector<std::string>  service_list;

  _peer_node_info__isset __isset;

  void __set_peer_node_id(const std::string& val);

  void __set_core_version(const int32_t val);

  void __set_protocol_version(const int32_t val);

  void __set_live_time_stamp(const int32_t val);

  void __set_addr(const network_address& val);

  void __set_service_list(const std::vector<std::string> & val);

  bool operator == (const peer_node_info & rhs) const
  {
    if (!(peer_node_id == rhs.peer_node_id))
      return false;
    if (!(core_version == rhs.core_version))
      return false;
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(live_time_stamp == rhs.live_time_stamp))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (__isset.service_list != rhs.__isset.service_list)
      return false;
    else if (__isset.service_list && !(service_list == rhs.service_list))
      return false;
    return true;
  }
  bool operator != (const peer_node_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const peer_node_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(peer_node_info &a, peer_node_info &b);

std::ostream& operator<<(std::ostream& out, const peer_node_info& obj);


class ver_req_body : public virtual ::apache::thrift::TBase {
 public:

  ver_req_body(const ver_req_body&);
  ver_req_body& operator=(const ver_req_body&);
  ver_req_body() : node_id(), core_version(0), protocol_version(0), time_stamp(0), start_height(0) {
  }

  virtual ~ver_req_body() throw();
  std::string node_id;
  int32_t core_version;
  int32_t protocol_version;
  int64_t time_stamp;
  network_address addr_me;
  network_address addr_you;
  int64_t start_height;

  void __set_node_id(const std::string& val);

  void __set_core_version(const int32_t val);

  void __set_protocol_version(const int32_t val);

  void __set_time_stamp(const int64_t val);

  void __set_addr_me(const network_address& val);

  void __set_addr_you(const network_address& val);

  void __set_start_height(const int64_t val);

  bool operator == (const ver_req_body & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(core_version == rhs.core_version))
      return false;
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(time_stamp == rhs.time_stamp))
      return false;
    if (!(addr_me == rhs.addr_me))
      return false;
    if (!(addr_you == rhs.addr_you))
      return false;
    if (!(start_height == rhs.start_height))
      return false;
    return true;
  }
  bool operator != (const ver_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ver_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ver_req_body &a, ver_req_body &b);

std::ostream& operator<<(std::ostream& out, const ver_req_body& obj);

typedef struct _ver_req__isset {
  _ver_req__isset() : body(false) {}
  bool body :1;
} _ver_req__isset;

//class ver_req : public virtual ::apache::thrift::TBase {
class ver_req : public virtual ::apache::thrift::TMsgBase {
 public:

  ver_req(const ver_req&);
  ver_req& operator=(const ver_req&);
  ver_req() {
  }

  virtual ~ver_req() throw();
  ver_req_body body;

  _ver_req__isset __isset;

  void __set_body(const ver_req_body& val);

  bool operator == (const ver_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const ver_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ver_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ver_req &a, ver_req &b);

std::ostream& operator<<(std::ostream& out, const ver_req& obj);


class ver_resp_body : public virtual ::apache::thrift::TBase {
 public:

  ver_resp_body(const ver_resp_body&);
  ver_resp_body& operator=(const ver_resp_body&);
  ver_resp_body() : node_id(), core_version(0), protocol_version(0) {
  }

  virtual ~ver_resp_body() throw();
  std::string node_id;
  int32_t core_version;
  int32_t protocol_version;

  void __set_node_id(const std::string& val);

  void __set_core_version(const int32_t val);

  void __set_protocol_version(const int32_t val);

  bool operator == (const ver_resp_body & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(core_version == rhs.core_version))
      return false;
    if (!(protocol_version == rhs.protocol_version))
      return false;
    return true;
  }
  bool operator != (const ver_resp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ver_resp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ver_resp_body &a, ver_resp_body &b);

std::ostream& operator<<(std::ostream& out, const ver_resp_body& obj);

typedef struct _ver_resp__isset {
  _ver_resp__isset() : body(false) {}
  bool body :1;
} _ver_resp__isset;

class ver_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  ver_resp(const ver_resp&);
  ver_resp& operator=(const ver_resp&);
  ver_resp() {
  }

  virtual ~ver_resp() throw();
  ver_resp_body body;

  _ver_resp__isset __isset;

  void __set_body(const ver_resp_body& val);

  bool operator == (const ver_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const ver_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ver_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ver_resp &a, ver_resp &b);

std::ostream& operator<<(std::ostream& out, const ver_resp& obj);

typedef struct _shake_hand_req__isset {
  _shake_hand_req__isset() : body(false) {}
  bool body :1;
} _shake_hand_req__isset;

class shake_hand_req : public virtual ::apache::thrift::TMsgBase {
 public:

  shake_hand_req(const shake_hand_req&);
  shake_hand_req& operator=(const shake_hand_req&);
  shake_hand_req() {
  }

  virtual ~shake_hand_req() throw();
  empty body;

  _shake_hand_req__isset __isset;

  void __set_body(const empty& val);

  bool operator == (const shake_hand_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const shake_hand_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shake_hand_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(shake_hand_req &a, shake_hand_req &b);

std::ostream& operator<<(std::ostream& out, const shake_hand_req& obj);

typedef struct _shake_hand_resp__isset {
  _shake_hand_resp__isset() : body(false) {}
  bool body :1;
} _shake_hand_resp__isset;

class shake_hand_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  shake_hand_resp(const shake_hand_resp&);
  shake_hand_resp& operator=(const shake_hand_resp&);
  shake_hand_resp() {
  }

  virtual ~shake_hand_resp() throw();
  empty body;

  _shake_hand_resp__isset __isset;

  void __set_body(const empty& val);

  bool operator == (const shake_hand_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const shake_hand_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const shake_hand_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(shake_hand_resp &a, shake_hand_resp &b);

std::ostream& operator<<(std::ostream& out, const shake_hand_resp& obj);

typedef struct _get_peer_nodes_req__isset {
  _get_peer_nodes_req__isset() : body(false) {}
  bool body :1;
} _get_peer_nodes_req__isset;

class get_peer_nodes_req : public virtual ::apache::thrift::TMsgBase {
 public:

  get_peer_nodes_req(const get_peer_nodes_req&);
  get_peer_nodes_req& operator=(const get_peer_nodes_req&);
  get_peer_nodes_req() {
  }

  virtual ~get_peer_nodes_req() throw();
  empty body;

  _get_peer_nodes_req__isset __isset;

  void __set_body(const empty& val);

  bool operator == (const get_peer_nodes_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const get_peer_nodes_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_peer_nodes_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(get_peer_nodes_req &a, get_peer_nodes_req &b);

std::ostream& operator<<(std::ostream& out, const get_peer_nodes_req& obj);


class get_peer_nodes_resp_body : public virtual ::apache::thrift::TBase {
 public:

  get_peer_nodes_resp_body(const get_peer_nodes_resp_body&);
  get_peer_nodes_resp_body& operator=(const get_peer_nodes_resp_body&);
  get_peer_nodes_resp_body() {
  }

  virtual ~get_peer_nodes_resp_body() throw();
  std::vector<peer_node_info>  peer_nodes_list;

  void __set_peer_nodes_list(const std::vector<peer_node_info> & val);

  bool operator == (const get_peer_nodes_resp_body & rhs) const
  {
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    return true;
  }
  bool operator != (const get_peer_nodes_resp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_peer_nodes_resp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(get_peer_nodes_resp_body &a, get_peer_nodes_resp_body &b);

std::ostream& operator<<(std::ostream& out, const get_peer_nodes_resp_body& obj);

typedef struct _get_peer_nodes_resp__isset {
  _get_peer_nodes_resp__isset() : body(false) {}
  bool body :1;
} _get_peer_nodes_resp__isset;

class get_peer_nodes_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  get_peer_nodes_resp(const get_peer_nodes_resp&);
  get_peer_nodes_resp& operator=(const get_peer_nodes_resp&);
  get_peer_nodes_resp() {
  }

  virtual ~get_peer_nodes_resp() throw();
  get_peer_nodes_resp_body body;

  _get_peer_nodes_resp__isset __isset;

  void __set_body(const get_peer_nodes_resp_body& val);

  bool operator == (const get_peer_nodes_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const get_peer_nodes_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_peer_nodes_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(get_peer_nodes_resp &a, get_peer_nodes_resp &b);

std::ostream& operator<<(std::ostream& out, const get_peer_nodes_resp& obj);


class peer_nodes_broadcast_req_body : public virtual ::apache::thrift::TBase {
 public:

  peer_nodes_broadcast_req_body(const peer_nodes_broadcast_req_body&);
  peer_nodes_broadcast_req_body& operator=(const peer_nodes_broadcast_req_body&);
  peer_nodes_broadcast_req_body() {
  }

  virtual ~peer_nodes_broadcast_req_body() throw();
  std::vector<peer_node_info>  peer_nodes_list;

  void __set_peer_nodes_list(const std::vector<peer_node_info> & val);

  bool operator == (const peer_nodes_broadcast_req_body & rhs) const
  {
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    return true;
  }
  bool operator != (const peer_nodes_broadcast_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const peer_nodes_broadcast_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(peer_nodes_broadcast_req_body &a, peer_nodes_broadcast_req_body &b);

std::ostream& operator<<(std::ostream& out, const peer_nodes_broadcast_req_body& obj);

typedef struct _peer_nodes_broadcast_req__isset {
  _peer_nodes_broadcast_req__isset() : body(false) {}
  bool body :1;
} _peer_nodes_broadcast_req__isset;

class peer_nodes_broadcast_req : public virtual ::apache::thrift::TMsgBase {
 public:

  peer_nodes_broadcast_req(const peer_nodes_broadcast_req&);
  peer_nodes_broadcast_req& operator=(const peer_nodes_broadcast_req&);
  peer_nodes_broadcast_req() {
  }

  virtual ~peer_nodes_broadcast_req() throw();
  peer_nodes_broadcast_req_body body;

  _peer_nodes_broadcast_req__isset __isset;

  void __set_body(const peer_nodes_broadcast_req_body& val);

  bool operator == (const peer_nodes_broadcast_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const peer_nodes_broadcast_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const peer_nodes_broadcast_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(peer_nodes_broadcast_req &a, peer_nodes_broadcast_req &b);

std::ostream& operator<<(std::ostream& out, const peer_nodes_broadcast_req& obj);

typedef struct _start_training_req_body__isset {
  _start_training_req_body__isset() : master(false), server_specification(false), server_count(false), hyper_parameters(false), container_name(false) {}
  bool master :1;
  bool server_specification :1;
  bool server_count :1;
  bool hyper_parameters :1;
  bool container_name :1;
} _start_training_req_body__isset;

class start_training_req_body : public virtual ::apache::thrift::TBase {
 public:

  start_training_req_body(const start_training_req_body&);
  start_training_req_body& operator=(const start_training_req_body&);
  start_training_req_body() : task_id(), select_mode(0), master(), server_specification(), server_count(0), training_engine(), code_dir(), entry_file(), data_dir(), checkpoint_dir(), hyper_parameters(), container_name() {
  }

  virtual ~start_training_req_body() throw();
  std::string task_id;
  int8_t select_mode;
  std::string master;
  std::vector<std::string>  peer_nodes_list;
  std::string server_specification;
  int32_t server_count;
  std::string training_engine;
  std::string code_dir;
  std::string entry_file;
  std::string data_dir;
  std::string checkpoint_dir;
  std::string hyper_parameters;
  std::string container_name;

  _start_training_req_body__isset __isset;

  void __set_task_id(const std::string& val);

  void __set_select_mode(const int8_t val);

  void __set_master(const std::string& val);

  void __set_peer_nodes_list(const std::vector<std::string> & val);

  void __set_server_specification(const std::string& val);

  void __set_server_count(const int32_t val);

  void __set_training_engine(const std::string& val);

  void __set_code_dir(const std::string& val);

  void __set_entry_file(const std::string& val);

  void __set_data_dir(const std::string& val);

  void __set_checkpoint_dir(const std::string& val);

  void __set_hyper_parameters(const std::string& val);

  void __set_container_name(const std::string& val);

  bool operator == (const start_training_req_body & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(select_mode == rhs.select_mode))
      return false;
    if (__isset.master != rhs.__isset.master)
      return false;
    else if (__isset.master && !(master == rhs.master))
      return false;
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    if (__isset.server_specification != rhs.__isset.server_specification)
      return false;
    else if (__isset.server_specification && !(server_specification == rhs.server_specification))
      return false;
    if (__isset.server_count != rhs.__isset.server_count)
      return false;
    else if (__isset.server_count && !(server_count == rhs.server_count))
      return false;
    if (!(training_engine == rhs.training_engine))
      return false;
    if (!(code_dir == rhs.code_dir))
      return false;
    if (!(entry_file == rhs.entry_file))
      return false;
    if (!(data_dir == rhs.data_dir))
      return false;
    if (!(checkpoint_dir == rhs.checkpoint_dir))
      return false;
    if (__isset.hyper_parameters != rhs.__isset.hyper_parameters)
      return false;
    else if (__isset.hyper_parameters && !(hyper_parameters == rhs.hyper_parameters))
      return false;
    if (__isset.container_name != rhs.__isset.container_name)
      return false;
    else if (__isset.container_name && !(container_name == rhs.container_name))
      return false;
    return true;
  }
  bool operator != (const start_training_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_training_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_training_req_body &a, start_training_req_body &b);

std::ostream& operator<<(std::ostream& out, const start_training_req_body& obj);

typedef struct _start_training_req__isset {
  _start_training_req__isset() : body(false) {}
  bool body :1;
} _start_training_req__isset;

class start_training_req : public virtual ::apache::thrift::TMsgBase {
 public:

  start_training_req(const start_training_req&);
  start_training_req& operator=(const start_training_req&);
  start_training_req() {
  }

  virtual ~start_training_req() throw();
  start_training_req_body body;

  _start_training_req__isset __isset;

  void __set_body(const start_training_req_body& val);

  bool operator == (const start_training_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const start_training_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const start_training_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(start_training_req &a, start_training_req &b);

std::ostream& operator<<(std::ostream& out, const start_training_req& obj);


class stop_training_req_body : public virtual ::apache::thrift::TBase {
 public:

  stop_training_req_body(const stop_training_req_body&);
  stop_training_req_body& operator=(const stop_training_req_body&);
  stop_training_req_body() : task_id() {
  }

  virtual ~stop_training_req_body() throw();
  std::string task_id;

  void __set_task_id(const std::string& val);

  bool operator == (const stop_training_req_body & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const stop_training_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stop_training_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(stop_training_req_body &a, stop_training_req_body &b);

std::ostream& operator<<(std::ostream& out, const stop_training_req_body& obj);

typedef struct _stop_training_req__isset {
  _stop_training_req__isset() : body(false) {}
  bool body :1;
} _stop_training_req__isset;

class stop_training_req : public virtual ::apache::thrift::TMsgBase {
 public:

  stop_training_req(const stop_training_req&);
  stop_training_req& operator=(const stop_training_req&);
  stop_training_req() {
  }

  virtual ~stop_training_req() throw();
  stop_training_req_body body;

  _stop_training_req__isset __isset;

  void __set_body(const stop_training_req_body& val);

  bool operator == (const stop_training_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const stop_training_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stop_training_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(stop_training_req &a, stop_training_req &b);

std::ostream& operator<<(std::ostream& out, const stop_training_req& obj);


class list_training_req_body : public virtual ::apache::thrift::TBase {
 public:

  list_training_req_body(const list_training_req_body&);
  list_training_req_body& operator=(const list_training_req_body&);
  list_training_req_body() {
  }

  virtual ~list_training_req_body() throw();
  std::vector<std::string>  task_list;

  void __set_task_list(const std::vector<std::string> & val);

  bool operator == (const list_training_req_body & rhs) const
  {
    if (!(task_list == rhs.task_list))
      return false;
    return true;
  }
  bool operator != (const list_training_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const list_training_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(list_training_req_body &a, list_training_req_body &b);

std::ostream& operator<<(std::ostream& out, const list_training_req_body& obj);

typedef struct _list_training_req__isset {
  _list_training_req__isset() : body(false) {}
  bool body :1;
} _list_training_req__isset;

class list_training_req : public virtual ::apache::thrift::TMsgBase {
 public:

  list_training_req(const list_training_req&);
  list_training_req& operator=(const list_training_req&);
  list_training_req() {
  }

  virtual ~list_training_req() throw();
  list_training_req_body body;

  _list_training_req__isset __isset;

  void __set_body(const list_training_req_body& val);

  bool operator == (const list_training_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const list_training_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const list_training_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(list_training_req &a, list_training_req &b);

std::ostream& operator<<(std::ostream& out, const list_training_req& obj);


class list_training_resp_body : public virtual ::apache::thrift::TBase {
 public:

  list_training_resp_body(const list_training_resp_body&);
  list_training_resp_body& operator=(const list_training_resp_body&);
  list_training_resp_body() {
  }

  virtual ~list_training_resp_body() throw();
  std::vector<task_status>  task_status_list;

  void __set_task_status_list(const std::vector<task_status> & val);

  bool operator == (const list_training_resp_body & rhs) const
  {
    if (!(task_status_list == rhs.task_status_list))
      return false;
    return true;
  }
  bool operator != (const list_training_resp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const list_training_resp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(list_training_resp_body &a, list_training_resp_body &b);

std::ostream& operator<<(std::ostream& out, const list_training_resp_body& obj);

typedef struct _list_training_resp__isset {
  _list_training_resp__isset() : body(false) {}
  bool body :1;
} _list_training_resp__isset;

class list_training_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  list_training_resp(const list_training_resp&);
  list_training_resp& operator=(const list_training_resp&);
  list_training_resp() {
  }

  virtual ~list_training_resp() throw();
  list_training_resp_body body;

  _list_training_resp__isset __isset;

  void __set_body(const list_training_resp_body& val);

  bool operator == (const list_training_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const list_training_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const list_training_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(list_training_resp &a, list_training_resp &b);

std::ostream& operator<<(std::ostream& out, const list_training_resp& obj);


class logs_req_body : public virtual ::apache::thrift::TBase {
 public:

  logs_req_body(const logs_req_body&);
  logs_req_body& operator=(const logs_req_body&);
  logs_req_body() : task_id(), head_or_tail(0), number_of_lines(0) {
  }

  virtual ~logs_req_body() throw();
  std::string task_id;
  std::vector<std::string>  peer_nodes_list;
  int8_t head_or_tail;
  int16_t number_of_lines;

  void __set_task_id(const std::string& val);

  void __set_peer_nodes_list(const std::vector<std::string> & val);

  void __set_head_or_tail(const int8_t val);

  void __set_number_of_lines(const int16_t val);

  bool operator == (const logs_req_body & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    if (!(head_or_tail == rhs.head_or_tail))
      return false;
    if (!(number_of_lines == rhs.number_of_lines))
      return false;
    return true;
  }
  bool operator != (const logs_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const logs_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(logs_req_body &a, logs_req_body &b);

std::ostream& operator<<(std::ostream& out, const logs_req_body& obj);

typedef struct _logs_req__isset {
  _logs_req__isset() : body(false) {}
  bool body :1;
} _logs_req__isset;

class logs_req : public virtual ::apache::thrift::TMsgBase {
 public:

  logs_req(const logs_req&);
  logs_req& operator=(const logs_req&);
  logs_req() {
  }

  virtual ~logs_req() throw();
  logs_req_body body;

  _logs_req__isset __isset;

  void __set_body(const logs_req_body& val);

  bool operator == (const logs_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const logs_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const logs_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(logs_req &a, logs_req &b);

std::ostream& operator<<(std::ostream& out, const logs_req& obj);


class peer_node_log : public virtual ::apache::thrift::TBase {
 public:

  peer_node_log(const peer_node_log&);
  peer_node_log& operator=(const peer_node_log&);
  peer_node_log() : peer_node_id(), log_content() {
  }

  virtual ~peer_node_log() throw();
  std::string peer_node_id;
  std::string log_content;

  void __set_peer_node_id(const std::string& val);

  void __set_log_content(const std::string& val);

  bool operator == (const peer_node_log & rhs) const
  {
    if (!(peer_node_id == rhs.peer_node_id))
      return false;
    if (!(log_content == rhs.log_content))
      return false;
    return true;
  }
  bool operator != (const peer_node_log &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const peer_node_log & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(peer_node_log &a, peer_node_log &b);

std::ostream& operator<<(std::ostream& out, const peer_node_log& obj);


class logs_resp_body : public virtual ::apache::thrift::TBase {
 public:

  logs_resp_body(const logs_resp_body&);
  logs_resp_body& operator=(const logs_resp_body&);
  logs_resp_body() {
  }

  virtual ~logs_resp_body() throw();
  peer_node_log log;

  void __set_log(const peer_node_log& val);

  bool operator == (const logs_resp_body & rhs) const
  {
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const logs_resp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const logs_resp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(logs_resp_body &a, logs_resp_body &b);

std::ostream& operator<<(std::ostream& out, const logs_resp_body& obj);

typedef struct _logs_resp__isset {
  _logs_resp__isset() : body(false) {}
  bool body :1;
} _logs_resp__isset;

class logs_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  logs_resp(const logs_resp&);
  logs_resp& operator=(const logs_resp&);
  logs_resp() {
  }

  virtual ~logs_resp() throw();
  logs_resp_body body;

  _logs_resp__isset __isset;

  void __set_body(const logs_resp_body& val);

  bool operator == (const logs_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const logs_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const logs_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(logs_resp &a, logs_resp &b);

std::ostream& operator<<(std::ostream& out, const logs_resp& obj);


class show_req_body : public virtual ::apache::thrift::TBase {
 public:

  show_req_body(const show_req_body&);
  show_req_body& operator=(const show_req_body&);
  show_req_body() : o_node_id(), d_node_id() {
  }

  virtual ~show_req_body() throw();
  std::string o_node_id;
  std::string d_node_id;
  std::vector<std::string>  keys;

  void __set_o_node_id(const std::string& val);

  void __set_d_node_id(const std::string& val);

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const show_req_body & rhs) const
  {
    if (!(o_node_id == rhs.o_node_id))
      return false;
    if (!(d_node_id == rhs.d_node_id))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const show_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const show_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(show_req_body &a, show_req_body &b);

std::ostream& operator<<(std::ostream& out, const show_req_body& obj);

typedef struct _show_req__isset {
  _show_req__isset() : body(false) {}
  bool body :1;
} _show_req__isset;

class show_req : public virtual ::apache::thrift::TMsgBase {
 public:

  show_req(const show_req&);
  show_req& operator=(const show_req&);
  show_req() {
  }

  virtual ~show_req() throw();
  show_req_body body;

  _show_req__isset __isset;

  void __set_body(const show_req_body& val);

  bool operator == (const show_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const show_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const show_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(show_req &a, show_req &b);

std::ostream& operator<<(std::ostream& out, const show_req& obj);


class show_resp_body : public virtual ::apache::thrift::TBase {
 public:

  show_resp_body(const show_resp_body&);
  show_resp_body& operator=(const show_resp_body&);
  show_resp_body() : o_node_id(), d_node_id() {
  }

  virtual ~show_resp_body() throw();
  std::string o_node_id;
  std::string d_node_id;
  std::map<std::string, std::string>  kvs;

  void __set_o_node_id(const std::string& val);

  void __set_d_node_id(const std::string& val);

  void __set_kvs(const std::map<std::string, std::string> & val);

  bool operator == (const show_resp_body & rhs) const
  {
    if (!(o_node_id == rhs.o_node_id))
      return false;
    if (!(d_node_id == rhs.d_node_id))
      return false;
    if (!(kvs == rhs.kvs))
      return false;
    return true;
  }
  bool operator != (const show_resp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const show_resp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(show_resp_body &a, show_resp_body &b);

std::ostream& operator<<(std::ostream& out, const show_resp_body& obj);

typedef struct _show_resp__isset {
  _show_resp__isset() : body(false) {}
  bool body :1;
} _show_resp__isset;

class show_resp : public virtual ::apache::thrift::TMsgBase {
 public:

  show_resp(const show_resp&);
  show_resp& operator=(const show_resp&);
  show_resp() {
  }

  virtual ~show_resp() throw();
  show_resp_body body;

  _show_resp__isset __isset;

  void __set_body(const show_resp_body& val);

  bool operator == (const show_resp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const show_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const show_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(show_resp &a, show_resp &b);

std::ostream& operator<<(std::ostream& out, const show_resp& obj);

typedef struct _node_service_info__isset {
  _node_service_info__isset() : name(false), time_stamp(false), kvs(false) {}
  bool name :1;
  bool time_stamp :1;
  bool kvs :1;
} _node_service_info__isset;

class node_service_info : public virtual ::apache::thrift::TBase {
 public:

  node_service_info(const node_service_info&);
  node_service_info& operator=(const node_service_info&);
  node_service_info() : name(), time_stamp(0) {
  }

  virtual ~node_service_info() throw();
  std::vector<std::string>  service_list;
  std::string name;
  int64_t time_stamp;
  std::map<std::string, std::string>  kvs;

  _node_service_info__isset __isset;

  void __set_service_list(const std::vector<std::string> & val);

  void __set_name(const std::string& val);

  void __set_time_stamp(const int64_t val);

  void __set_kvs(const std::map<std::string, std::string> & val);

  bool operator == (const node_service_info & rhs) const
  {
    if (!(service_list == rhs.service_list))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.time_stamp != rhs.__isset.time_stamp)
      return false;
    else if (__isset.time_stamp && !(time_stamp == rhs.time_stamp))
      return false;
    if (__isset.kvs != rhs.__isset.kvs)
      return false;
    else if (__isset.kvs && !(kvs == rhs.kvs))
      return false;
    return true;
  }
  bool operator != (const node_service_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_service_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_service_info &a, node_service_info &b);

std::ostream& operator<<(std::ostream& out, const node_service_info& obj);


class service_broadcast_req_body : public virtual ::apache::thrift::TBase {
 public:

  service_broadcast_req_body(const service_broadcast_req_body&);
  service_broadcast_req_body& operator=(const service_broadcast_req_body&);
  service_broadcast_req_body() {
  }

  virtual ~service_broadcast_req_body() throw();
  std::map<std::string, node_service_info>  node_service_info_map;

  void __set_node_service_info_map(const std::map<std::string, node_service_info> & val);

  bool operator == (const service_broadcast_req_body & rhs) const
  {
    if (!(node_service_info_map == rhs.node_service_info_map))
      return false;
    return true;
  }
  bool operator != (const service_broadcast_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_broadcast_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(service_broadcast_req_body &a, service_broadcast_req_body &b);

std::ostream& operator<<(std::ostream& out, const service_broadcast_req_body& obj);

typedef struct _service_broadcast_req__isset {
  _service_broadcast_req__isset() : body(false) {}
  bool body :1;
} _service_broadcast_req__isset;

class service_broadcast_req : public virtual ::apache::thrift::TMsgBase {
 public:

  service_broadcast_req(const service_broadcast_req&);
  service_broadcast_req& operator=(const service_broadcast_req&);
  service_broadcast_req() {
  }

  virtual ~service_broadcast_req() throw();
  service_broadcast_req_body body;

  _service_broadcast_req__isset __isset;

  void __set_body(const service_broadcast_req_body& val);

  bool operator == (const service_broadcast_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const service_broadcast_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_broadcast_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(service_broadcast_req &a, service_broadcast_req &b);

std::ostream& operator<<(std::ostream& out, const service_broadcast_req& obj);

}} // namespace

#endif
