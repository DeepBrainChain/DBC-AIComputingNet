/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "network_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


networkInfo::~networkInfo() throw() {
}


void networkInfo::__set_networkId(const std::string& val) {
  this->networkId = val;
}

void networkInfo::__set_bridgeName(const std::string& val) {
  this->bridgeName = val;
}

void networkInfo::__set_vxlanName(const std::string& val) {
  this->vxlanName = val;
}

void networkInfo::__set_vxlanVni(const std::string& val) {
  this->vxlanVni = val;
}

void networkInfo::__set_ipCidr(const std::string& val) {
  this->ipCidr = val;
}

void networkInfo::__set_ipStart(const std::string& val) {
  this->ipStart = val;
}

void networkInfo::__set_ipEnd(const std::string& val) {
  this->ipEnd = val;
}
std::ostream& operator<<(std::ostream& out, const networkInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t networkInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_networkId = false;
  bool isset_bridgeName = false;
  bool isset_vxlanName = false;
  bool isset_vxlanVni = false;
  bool isset_ipCidr = false;
  bool isset_ipStart = false;
  bool isset_ipEnd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->networkId);
          isset_networkId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bridgeName);
          isset_bridgeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vxlanName);
          isset_vxlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vxlanVni);
          isset_vxlanVni = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipCidr);
          isset_ipCidr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipStart);
          isset_ipStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipEnd);
          isset_ipEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_networkId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bridgeName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vxlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vxlanVni)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipCidr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t networkInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("networkInfo");

  xfer += oprot->writeFieldBegin("networkId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->networkId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bridgeName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->bridgeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vxlanName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->vxlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vxlanVni", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->vxlanVni);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipCidr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ipCidr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipStart", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ipStart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipEnd", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ipEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(networkInfo &a, networkInfo &b) {
  using ::std::swap;
  swap(a.networkId, b.networkId);
  swap(a.bridgeName, b.bridgeName);
  swap(a.vxlanName, b.vxlanName);
  swap(a.vxlanVni, b.vxlanVni);
  swap(a.ipCidr, b.ipCidr);
  swap(a.ipStart, b.ipStart);
  swap(a.ipEnd, b.ipEnd);
}

networkInfo::networkInfo(const networkInfo& other0) {
  networkId = other0.networkId;
  bridgeName = other0.bridgeName;
  vxlanName = other0.vxlanName;
  vxlanVni = other0.vxlanVni;
  ipCidr = other0.ipCidr;
  ipStart = other0.ipStart;
  ipEnd = other0.ipEnd;
}
networkInfo& networkInfo::operator=(const networkInfo& other1) {
  networkId = other1.networkId;
  bridgeName = other1.bridgeName;
  vxlanName = other1.vxlanName;
  vxlanVni = other1.vxlanVni;
  ipCidr = other1.ipCidr;
  ipStart = other1.ipStart;
  ipEnd = other1.ipEnd;
  return *this;
}
void networkInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "networkInfo(";
  out << "networkId=" << to_string(networkId);
  out << ", " << "bridgeName=" << to_string(bridgeName);
  out << ", " << "vxlanName=" << to_string(vxlanName);
  out << ", " << "vxlanVni=" << to_string(vxlanVni);
  out << ", " << "ipCidr=" << to_string(ipCidr);
  out << ", " << "ipStart=" << to_string(ipStart);
  out << ", " << "ipEnd=" << to_string(ipEnd);
  out << ")";
}

} // namespace
