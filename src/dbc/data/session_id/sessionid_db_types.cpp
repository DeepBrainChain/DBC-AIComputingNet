/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sessionid_db_types.h"
#include <algorithm>
#include <ostream>

namespace dbc {


owner_sessionid::~owner_sessionid() throw() {
}


void owner_sessionid::__set_wallet(const std::string& val) {
  this->wallet = val;
}

void owner_sessionid::__set_session_id(const std::string& val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const owner_sessionid& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t owner_sessionid::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_wallet = false;
  bool isset_session_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wallet);
          isset_wallet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_id);
          isset_session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_wallet)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t owner_sessionid::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("owner_sessionid");

  xfer += oprot->writeFieldBegin("wallet", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->wallet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(owner_sessionid &a, owner_sessionid &b) {
  using ::std::swap;
  swap(a.wallet, b.wallet);
  swap(a.session_id, b.session_id);
}

owner_sessionid::owner_sessionid(const owner_sessionid& other0) {
  wallet = other0.wallet;
  session_id = other0.session_id;
}
owner_sessionid& owner_sessionid::operator=(const owner_sessionid& other1) {
  wallet = other1.wallet;
  session_id = other1.session_id;
  return *this;
}
void owner_sessionid::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "owner_sessionid(";
  out << "wallet=" << to_string(wallet);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}

} // namespace
