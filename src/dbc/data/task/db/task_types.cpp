/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "task_types.h"
#include <algorithm>
#include <ostream>

namespace dbc {


    HardwareResource::~HardwareResource() throw() {
    }


    void HardwareResource::__set_gpu_count(const int32_t val) {
        this->gpu_count = val;
    }

    void HardwareResource::__set_cpu_cores(const int32_t val) {
        this->cpu_cores = val;
    }

    void HardwareResource::__set_mem_rate(const double val) {
        this->mem_rate = val;
    }
    std::ostream& operator<<(std::ostream& out, const HardwareResource& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t HardwareResource::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_gpu_count = false;
        bool isset_cpu_cores = false;
        bool isset_mem_rate = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->gpu_count);
                        isset_gpu_count = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->cpu_cores);
                        isset_cpu_cores = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
                        xfer += iprot->readDouble(this->mem_rate);
                        isset_mem_rate = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_gpu_count)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_cpu_cores)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_mem_rate)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t HardwareResource::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("HardwareResource");

        xfer += oprot->writeFieldBegin("gpu_count", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->gpu_count);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("cpu_cores", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->cpu_cores);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("mem_rate", ::apache::thrift::protocol::T_DOUBLE, 3);
        xfer += oprot->writeDouble(this->mem_rate);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(HardwareResource &a, HardwareResource &b) {
        using ::std::swap;
        swap(a.gpu_count, b.gpu_count);
        swap(a.cpu_cores, b.cpu_cores);
        swap(a.mem_rate, b.mem_rate);
    }

    HardwareResource::HardwareResource(const HardwareResource& other0) {
        gpu_count = other0.gpu_count;
        cpu_cores = other0.cpu_cores;
        mem_rate = other0.mem_rate;
    }
    HardwareResource& HardwareResource::operator=(const HardwareResource& other1) {
        gpu_count = other1.gpu_count;
        cpu_cores = other1.cpu_cores;
        mem_rate = other1.mem_rate;
        return *this;
    }
    void HardwareResource::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "HardwareResource(";
        out << "gpu_count=" << to_string(gpu_count);
        out << ", " << "cpu_cores=" << to_string(cpu_cores);
        out << ", " << "mem_rate=" << to_string(mem_rate);
        out << ")";
    }


    TaskInfo::~TaskInfo() throw() {
    }


    void TaskInfo::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void TaskInfo::__set_image_name(const std::string& val) {
        this->image_name = val;
    }

    void TaskInfo::__set_login_password(const std::string& val) {
        this->login_password = val;
    }

    void TaskInfo::__set_ssh_port(const std::string& val) {
        this->ssh_port = val;
    }

    void TaskInfo::__set_status(const int32_t val) {
        this->status = val;
    }

    void TaskInfo::__set_operation(const int32_t val) {
        this->operation = val;
        __isset.operation = true;
    }

    void TaskInfo::__set_create_time(const int64_t val) {
        this->create_time = val;
    }

    void TaskInfo::__set_last_start_time(const int64_t val) {
        this->last_start_time = val;
        __isset.last_start_time = true;
    }

    void TaskInfo::__set_last_stop_time(const int64_t val) {
        this->last_stop_time = val;
        __isset.last_stop_time = true;
    }

    void TaskInfo::__set_hardware_resource(const HardwareResource& val) {
        this->hardware_resource = val;
    }

    void TaskInfo::__set_vm_xml(const std::string& val) {
        this->vm_xml = val;
        __isset.vm_xml = true;
    }

    void TaskInfo::__set_vm_xml_url(const std::string& val) {
        this->vm_xml_url = val;
        __isset.vm_xml_url = true;
    }
    std::ostream& operator<<(std::ostream& out, const TaskInfo& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_image_name = false;
        bool isset_login_password = false;
        bool isset_ssh_port = false;
        bool isset_status = false;
        bool isset_create_time = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->image_name);
                        isset_image_name = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->login_password);
                        isset_login_password = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->ssh_port);
                        isset_ssh_port = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 5:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->status);
                        isset_status = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 6:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->operation);
                        this->__isset.operation = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 7:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->create_time);
                        isset_create_time = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 8:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->last_start_time);
                        this->__isset.last_start_time = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 9:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->last_stop_time);
                        this->__isset.last_stop_time = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 10:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->hardware_resource.read(iprot);
                        this->__isset.hardware_resource = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 11:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->vm_xml);
                        this->__isset.vm_xml = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 12:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->vm_xml_url);
                        this->__isset.vm_xml_url = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_image_name)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_login_password)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_ssh_port)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_status)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_create_time)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("TaskInfo");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("image_name", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->image_name);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("login_password", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->login_password);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("ssh_port", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->ssh_port);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 5);
        xfer += oprot->writeI32(this->status);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.operation) {
            xfer += oprot->writeFieldBegin("operation", ::apache::thrift::protocol::T_I32, 6);
            xfer += oprot->writeI32(this->operation);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->create_time);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.last_start_time) {
            xfer += oprot->writeFieldBegin("last_start_time", ::apache::thrift::protocol::T_I64, 8);
            xfer += oprot->writeI64(this->last_start_time);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.last_stop_time) {
            xfer += oprot->writeFieldBegin("last_stop_time", ::apache::thrift::protocol::T_I64, 9);
            xfer += oprot->writeI64(this->last_stop_time);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldBegin("hardware_resource", ::apache::thrift::protocol::T_STRUCT, 10);
        xfer += this->hardware_resource.write(oprot);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.vm_xml) {
            xfer += oprot->writeFieldBegin("vm_xml", ::apache::thrift::protocol::T_STRING, 11);
            xfer += oprot->writeString(this->vm_xml);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.vm_xml_url) {
            xfer += oprot->writeFieldBegin("vm_xml_url", ::apache::thrift::protocol::T_STRING, 12);
            xfer += oprot->writeString(this->vm_xml_url);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(TaskInfo &a, TaskInfo &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.image_name, b.image_name);
        swap(a.login_password, b.login_password);
        swap(a.ssh_port, b.ssh_port);
        swap(a.status, b.status);
        swap(a.operation, b.operation);
        swap(a.create_time, b.create_time);
        swap(a.last_start_time, b.last_start_time);
        swap(a.last_stop_time, b.last_stop_time);
        swap(a.hardware_resource, b.hardware_resource);
        swap(a.vm_xml, b.vm_xml);
        swap(a.vm_xml_url, b.vm_xml_url);
        swap(a.__isset, b.__isset);
    }

    TaskInfo::TaskInfo(const TaskInfo& other2) {
        task_id = other2.task_id;
        image_name = other2.image_name;
        login_password = other2.login_password;
        ssh_port = other2.ssh_port;
        status = other2.status;
        operation = other2.operation;
        create_time = other2.create_time;
        last_start_time = other2.last_start_time;
        last_stop_time = other2.last_stop_time;
        hardware_resource = other2.hardware_resource;
        vm_xml = other2.vm_xml;
        vm_xml_url = other2.vm_xml_url;
        __isset = other2.__isset;
    }
    TaskInfo& TaskInfo::operator=(const TaskInfo& other3) {
        task_id = other3.task_id;
        image_name = other3.image_name;
        login_password = other3.login_password;
        ssh_port = other3.ssh_port;
        status = other3.status;
        operation = other3.operation;
        create_time = other3.create_time;
        last_start_time = other3.last_start_time;
        last_stop_time = other3.last_stop_time;
        hardware_resource = other3.hardware_resource;
        vm_xml = other3.vm_xml;
        vm_xml_url = other3.vm_xml_url;
        __isset = other3.__isset;
        return *this;
    }
    void TaskInfo::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "TaskInfo(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "image_name=" << to_string(image_name);
        out << ", " << "login_password=" << to_string(login_password);
        out << ", " << "ssh_port=" << to_string(ssh_port);
        out << ", " << "status=" << to_string(status);
        out << ", " << "operation="; (__isset.operation ? (out << to_string(operation)) : (out << "<null>"));
        out << ", " << "create_time=" << to_string(create_time);
        out << ", " << "last_start_time="; (__isset.last_start_time ? (out << to_string(last_start_time)) : (out << "<null>"));
        out << ", " << "last_stop_time="; (__isset.last_stop_time ? (out << to_string(last_stop_time)) : (out << "<null>"));
        out << ", " << "hardware_resource=" << to_string(hardware_resource);
        out << ", " << "vm_xml="; (__isset.vm_xml ? (out << to_string(vm_xml)) : (out << "<null>"));
        out << ", " << "vm_xml_url="; (__isset.vm_xml_url ? (out << to_string(vm_xml_url)) : (out << "<null>"));
        out << ")";
    }

} // namespace
