/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "iptable_db_types.h"
#include <algorithm>
#include <ostream>

namespace dbc {


    task_iptable::~task_iptable() throw() {
    }


    void task_iptable::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void task_iptable::__set_host_ip(const std::string& val) {
        this->host_ip = val;
    }

    void task_iptable::__set_vm_local_ip(const std::string& val) {
        this->vm_local_ip = val;
    }

    void task_iptable::__set_ssh_port(const std::string& val) {
        this->ssh_port = val;
    }
    std::ostream& operator<<(std::ostream& out, const task_iptable& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t task_iptable::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_host_ip = false;
        bool isset_vm_local_ip = false;
        bool isset_ssh_port = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->host_ip);
                            isset_host_ip = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->vm_local_ip);
                                isset_vm_local_ip = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_STRING) {
                                    xfer += iprot->readString(this->ssh_port);
                                    isset_ssh_port = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                default:
                                    xfer += iprot->skip(ftype);
                                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_host_ip)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_vm_local_ip)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_ssh_port)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t task_iptable::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("task_iptable");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("host_ip", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->host_ip);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("vm_local_ip", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->vm_local_ip);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("ssh_port", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->ssh_port);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(task_iptable &a, task_iptable &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.host_ip, b.host_ip);
        swap(a.vm_local_ip, b.vm_local_ip);
        swap(a.ssh_port, b.ssh_port);
    }

    task_iptable::task_iptable(const task_iptable& other0) {
        task_id = other0.task_id;
        host_ip = other0.host_ip;
        vm_local_ip = other0.vm_local_ip;
        ssh_port = other0.ssh_port;
    }
    task_iptable& task_iptable::operator=(const task_iptable& other1) {
        task_id = other1.task_id;
        host_ip = other1.host_ip;
        vm_local_ip = other1.vm_local_ip;
        ssh_port = other1.ssh_port;
        return *this;
    }
    void task_iptable::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "task_iptable(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "host_ip=" << to_string(host_ip);
        out << ", " << "vm_local_ip=" << to_string(vm_local_ip);
        out << ", " << "ssh_port=" << to_string(ssh_port);
        out << ")";
    }

} // namespace
