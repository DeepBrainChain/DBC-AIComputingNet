/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TASK_TYPES_H
#define TASK_TYPES_H

#include <iosfwd>
#include "protocol.h"
#include "service_message.h"
#include "TToString.h"

namespace dbc {

    class TaskInfo;

    typedef struct _TaskInfo__isset {
        _TaskInfo__isset() : login_password(false), ssh_port(false), operation(false), create_time(false), last_start_time(false), last_stop_time(false) {}
        bool login_password :1;
        bool ssh_port :1;
        bool operation :1;
        bool create_time :1;
        bool last_start_time :1;
        bool last_stop_time :1;
    } _TaskInfo__isset;

    class TaskInfo : public virtual ::apache::thrift::TBase {
    public:

        TaskInfo(const TaskInfo&);
        TaskInfo& operator=(const TaskInfo&);
        TaskInfo() : task_id(), image_name(), login_password(), ssh_port(), operation(0), create_time(0), last_start_time(0), last_stop_time(0) {
        }

        virtual ~TaskInfo() throw();
        std::string task_id;
        std::string image_name;
        std::string login_password;
        std::string ssh_port;
        int32_t operation;
        int64_t create_time;
        int64_t last_start_time;
        int64_t last_stop_time;

        _TaskInfo__isset __isset;

        void __set_task_id(const std::string& val);

        void __set_image_name(const std::string& val);

        void __set_login_password(const std::string& val);

        void __set_ssh_port(const std::string& val);

        void __set_operation(const int32_t val);

        void __set_create_time(const int64_t val);

        void __set_last_start_time(const int64_t val);

        void __set_last_stop_time(const int64_t val);

        bool operator == (const TaskInfo & rhs) const
        {
            if (!(task_id == rhs.task_id))
                return false;
            if (!(image_name == rhs.image_name))
                return false;
            if (__isset.login_password != rhs.__isset.login_password)
                return false;
            else if (__isset.login_password && !(login_password == rhs.login_password))
                return false;
            if (__isset.ssh_port != rhs.__isset.ssh_port)
                return false;
            else if (__isset.ssh_port && !(ssh_port == rhs.ssh_port))
                return false;
            if (__isset.operation != rhs.__isset.operation)
                return false;
            else if (__isset.operation && !(operation == rhs.operation))
                return false;
            if (__isset.create_time != rhs.__isset.create_time)
                return false;
            else if (__isset.create_time && !(create_time == rhs.create_time))
                return false;
            if (__isset.last_start_time != rhs.__isset.last_start_time)
                return false;
            else if (__isset.last_start_time && !(last_start_time == rhs.last_start_time))
                return false;
            if (__isset.last_stop_time != rhs.__isset.last_stop_time)
                return false;
            else if (__isset.last_stop_time && !(last_stop_time == rhs.last_stop_time))
                return false;
            return true;
        }
        bool operator != (const TaskInfo &rhs) const {
            return !(*this == rhs);
        }

        bool operator < (const TaskInfo & ) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        virtual void printTo(std::ostream& out) const;
    };

    void swap(TaskInfo &a, TaskInfo &b);

    std::ostream& operator<<(std::ostream& out, const TaskInfo& obj);

} // namespace

#endif
