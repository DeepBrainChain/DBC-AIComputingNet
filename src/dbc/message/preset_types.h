/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef preset_TYPES_H
#define preset_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <functional>
// #include <memory>

#include "network/protocol/protocol.h"
#include "util/TToString.h"

namespace occ {

struct MessageType {
    enum type {
        PING = 1,
        GET_HOST_INFO = 2,
        SET_HOST_INFO = 3,
        GET_USER_LIST = 4,
        SET_USER_PASSWORD = 5,
        GET_BOOT_MENU = 32,
        SET_BOOT_MENU = 33,
        GET_SMYOO_DEVICE_INFO = 34,
        SET_SMYOO_DEVICE_POWER = 35
    };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageType::type& val);

std::string to_string(const MessageType::type& val);

class ResultStruct;

class Message;

class HostInfo;

class UserList;

class UserPassword;

class BootMenuList;

class BootMenu;

class SmyooDeviceInfo;

class SmyooDevicePowerData;

class InvalidMessageType;

class ResultStruct : public virtual ::apache::thrift::TBase {
public:
    ResultStruct(const ResultStruct&);
    ResultStruct& operator=(const ResultStruct&);
    ResultStruct() : code(0), message() {}

    virtual ~ResultStruct() noexcept;
    int32_t code;
    std::string message;

    void __set_code(const int32_t val);

    void __set_message(const std::string& val);

    bool operator==(const ResultStruct& rhs) const {
        if (!(code == rhs.code)) return false;
        if (!(message == rhs.message)) return false;
        return true;
    }
    bool operator!=(const ResultStruct& rhs) const { return !(*this == rhs); }

    bool operator<(const ResultStruct&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(ResultStruct& a, ResultStruct& b);

std::ostream& operator<<(std::ostream& out, const ResultStruct& obj);

typedef struct _Message__isset {
    _Message__isset() : host(false) {}
    bool host : 1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
public:
    Message(const Message&);
    Message& operator=(const Message&);
    Message() : version(0), type(0), body(), host() {}

    virtual ~Message() noexcept;
    int32_t version;
    int32_t type;
    std::string body;
    std::string host;

    _Message__isset __isset;

    void __set_version(const int32_t val);

    void __set_type(const int32_t val);

    void __set_body(const std::string& val);

    void __set_host(const std::string& val);

    bool operator==(const Message& rhs) const {
        if (!(version == rhs.version)) return false;
        if (!(type == rhs.type)) return false;
        if (!(body == rhs.body)) return false;
        if (__isset.host != rhs.__isset.host)
            return false;
        else if (__isset.host && !(host == rhs.host))
            return false;
        return true;
    }
    bool operator!=(const Message& rhs) const { return !(*this == rhs); }

    bool operator<(const Message&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(Message& a, Message& b);

std::ostream& operator<<(std::ostream& out, const Message& obj);

class HostInfo : public virtual ::apache::thrift::TBase {
public:
    HostInfo(const HostInfo&);
    HostInfo& operator=(const HostInfo&);
    HostInfo() : hostName(), ipAddress() {}

    virtual ~HostInfo() noexcept;
    std::string hostName;
    std::string ipAddress;

    void __set_hostName(const std::string& val);

    void __set_ipAddress(const std::string& val);

    bool operator==(const HostInfo& rhs) const {
        if (!(hostName == rhs.hostName)) return false;
        if (!(ipAddress == rhs.ipAddress)) return false;
        return true;
    }
    bool operator!=(const HostInfo& rhs) const { return !(*this == rhs); }

    bool operator<(const HostInfo&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(HostInfo& a, HostInfo& b);

std::ostream& operator<<(std::ostream& out, const HostInfo& obj);

class UserList : public virtual ::apache::thrift::TBase {
public:
    UserList(const UserList&);
    UserList& operator=(const UserList&);
    UserList() {}

    virtual ~UserList() noexcept;
    std::vector<std::string> users;

    void __set_users(const std::vector<std::string>& val);

    bool operator==(const UserList& rhs) const {
        if (!(users == rhs.users)) return false;
        return true;
    }
    bool operator!=(const UserList& rhs) const { return !(*this == rhs); }

    bool operator<(const UserList&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(UserList& a, UserList& b);

std::ostream& operator<<(std::ostream& out, const UserList& obj);

class UserPassword : public virtual ::apache::thrift::TBase {
public:
    UserPassword(const UserPassword&);
    UserPassword& operator=(const UserPassword&);
    UserPassword() : userName(), password() {}

    virtual ~UserPassword() noexcept;
    std::string userName;
    std::string password;

    void __set_userName(const std::string& val);

    void __set_password(const std::string& val);

    bool operator==(const UserPassword& rhs) const {
        if (!(userName == rhs.userName)) return false;
        if (!(password == rhs.password)) return false;
        return true;
    }
    bool operator!=(const UserPassword& rhs) const { return !(*this == rhs); }

    bool operator<(const UserPassword&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(UserPassword& a, UserPassword& b);

std::ostream& operator<<(std::ostream& out, const UserPassword& obj);

class BootMenuList : public virtual ::apache::thrift::TBase {
public:
    BootMenuList(const BootMenuList&);
    BootMenuList& operator=(const BootMenuList&);
    BootMenuList() {}

    virtual ~BootMenuList() noexcept;
    std::vector<std::string> menus;

    void __set_menus(const std::vector<std::string>& val);

    bool operator==(const BootMenuList& rhs) const {
        if (!(menus == rhs.menus)) return false;
        return true;
    }
    bool operator!=(const BootMenuList& rhs) const { return !(*this == rhs); }

    bool operator<(const BootMenuList&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(BootMenuList& a, BootMenuList& b);

std::ostream& operator<<(std::ostream& out, const BootMenuList& obj);

class BootMenu : public virtual ::apache::thrift::TBase {
public:
    BootMenu(const BootMenu&);
    BootMenu& operator=(const BootMenu&);
    BootMenu() : menu(), superTube(0) {}

    virtual ~BootMenu() noexcept;
    std::string menu;
    bool superTube;

    void __set_menu(const std::string& val);

    void __set_superTube(const bool val);

    bool operator==(const BootMenu& rhs) const {
        if (!(menu == rhs.menu)) return false;
        if (!(superTube == rhs.superTube)) return false;
        return true;
    }
    bool operator!=(const BootMenu& rhs) const { return !(*this == rhs); }

    bool operator<(const BootMenu&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(BootMenu& a, BootMenu& b);

std::ostream& operator<<(std::ostream& out, const BootMenu& obj);

class SmyooDeviceInfo : public virtual ::apache::thrift::TBase {
public:
    SmyooDeviceInfo(const SmyooDeviceInfo&);
    SmyooDeviceInfo& operator=(const SmyooDeviceInfo&);
    SmyooDeviceInfo() : mcuname(), note(), isonline(0), power(0), mcuid() {}

    virtual ~SmyooDeviceInfo() noexcept;
    std::string mcuname;
    std::string note;
    int32_t isonline;
    int32_t power;
    std::string mcuid;

    void __set_mcuname(const std::string& val);

    void __set_note(const std::string& val);

    void __set_isonline(const int32_t val);

    void __set_power(const int32_t val);

    void __set_mcuid(const std::string& val);

    bool operator==(const SmyooDeviceInfo& rhs) const {
        if (!(mcuname == rhs.mcuname)) return false;
        if (!(note == rhs.note)) return false;
        if (!(isonline == rhs.isonline)) return false;
        if (!(power == rhs.power)) return false;
        if (!(mcuid == rhs.mcuid)) return false;
        return true;
    }
    bool operator!=(const SmyooDeviceInfo& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const SmyooDeviceInfo&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(SmyooDeviceInfo& a, SmyooDeviceInfo& b);

std::ostream& operator<<(std::ostream& out, const SmyooDeviceInfo& obj);

typedef struct _SmyooDevicePowerData__isset {
    _SmyooDevicePowerData__isset() : mcuid(false), mcuname(false) {}
    bool mcuid : 1;
    bool mcuname : 1;
} _SmyooDevicePowerData__isset;

class SmyooDevicePowerData : public virtual ::apache::thrift::TBase {
public:
    SmyooDevicePowerData(const SmyooDevicePowerData&);
    SmyooDevicePowerData& operator=(const SmyooDevicePowerData&);
    SmyooDevicePowerData() : status(0), mcuid(), mcuname() {}

    virtual ~SmyooDevicePowerData() noexcept;
    int32_t status;
    std::string mcuid;
    std::string mcuname;

    _SmyooDevicePowerData__isset __isset;

    void __set_status(const int32_t val);

    void __set_mcuid(const std::string& val);

    void __set_mcuname(const std::string& val);

    bool operator==(const SmyooDevicePowerData& rhs) const {
        if (!(status == rhs.status)) return false;
        if (__isset.mcuid != rhs.__isset.mcuid)
            return false;
        else if (__isset.mcuid && !(mcuid == rhs.mcuid))
            return false;
        if (__isset.mcuname != rhs.__isset.mcuname)
            return false;
        else if (__isset.mcuname && !(mcuname == rhs.mcuname))
            return false;
        return true;
    }
    bool operator!=(const SmyooDevicePowerData& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const SmyooDevicePowerData&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
};

void swap(SmyooDevicePowerData& a, SmyooDevicePowerData& b);

std::ostream& operator<<(std::ostream& out, const SmyooDevicePowerData& obj);

typedef struct _InvalidMessageType__isset {
    _InvalidMessageType__isset() : whatType(false), why(false) {}
    bool whatType : 1;
    bool why : 1;
} _InvalidMessageType__isset;

class InvalidMessageType : public ::apache::thrift::TException {
public:
    InvalidMessageType(const InvalidMessageType&);
    InvalidMessageType& operator=(const InvalidMessageType&);
    InvalidMessageType() : whatType(0), why() {}

    virtual ~InvalidMessageType() noexcept;
    int32_t whatType;
    std::string why;

    _InvalidMessageType__isset __isset;

    void __set_whatType(const int32_t val);

    void __set_why(const std::string& val);

    bool operator==(const InvalidMessageType& rhs) const {
        if (!(whatType == rhs.whatType)) return false;
        if (!(why == rhs.why)) return false;
        return true;
    }
    bool operator!=(const InvalidMessageType& rhs) const {
        return !(*this == rhs);
    }

    bool operator<(const InvalidMessageType&) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
    mutable std::string thriftTExceptionMessageHolder_;
    const char* what() const noexcept;
};

void swap(InvalidMessageType& a, InvalidMessageType& b);

std::ostream& operator<<(std::ostream& out, const InvalidMessageType& obj);

}  // namespace occ

#endif
