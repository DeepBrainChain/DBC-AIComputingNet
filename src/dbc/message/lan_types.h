/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef lan_TYPES_H
#define lan_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <thrift/stdcxx.h>

#include "network/protocol/protocol.h"
#include "network/protocol/net_message.h"
#include "util/TToString.h"

namespace dbc {

class multisig_sign_item;

class node_list_lan_req_data;

class node_list_lan_req_body;

class node_list_lan_req;

class node_list_lan_rsp_body;

class node_list_lan_rsp;

class node_create_lan_req_data;

class node_create_lan_req_body;

class node_create_lan_req;

class node_create_lan_rsp_body;

class node_create_lan_rsp;

class node_delete_lan_req_data;

class node_delete_lan_req_body;

class node_delete_lan_req;

class node_delete_lan_rsp_body;

class node_delete_lan_rsp;


class node_list_lan_req_data : public virtual ::apache::thrift::TBase {
 public:

  node_list_lan_req_data(const node_list_lan_req_data&);
  node_list_lan_req_data& operator=(const node_list_lan_req_data&);
  node_list_lan_req_data() : network_id(), additional(), wallet(), nonce(), sign(), multisig_threshold(0), session_id(), session_id_sign() {
  }

  virtual ~node_list_lan_req_data() throw();
  std::string network_id;
  std::vector<std::string>  peer_nodes_list;
  std::string additional;
  std::string wallet;
  std::string nonce;
  std::string sign;
  std::vector<std::string>  multisig_wallets;
  int32_t multisig_threshold;
  std::vector<multisig_sign_item>  multisig_signs;
  std::string session_id;
  std::string session_id_sign;

  void __set_network_id(const std::string& val);

  void __set_peer_nodes_list(const std::vector<std::string> & val);

  void __set_additional(const std::string& val);

  void __set_wallet(const std::string& val);

  void __set_nonce(const std::string& val);

  void __set_sign(const std::string& val);

  void __set_multisig_wallets(const std::vector<std::string> & val);

  void __set_multisig_threshold(const int32_t val);

  void __set_multisig_signs(const std::vector<multisig_sign_item> & val);

  void __set_session_id(const std::string& val);

  void __set_session_id_sign(const std::string& val);

  bool operator == (const node_list_lan_req_data & rhs) const
  {
    if (!(network_id == rhs.network_id))
      return false;
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    if (!(additional == rhs.additional))
      return false;
    if (!(wallet == rhs.wallet))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(sign == rhs.sign))
      return false;
    if (!(multisig_wallets == rhs.multisig_wallets))
      return false;
    if (!(multisig_threshold == rhs.multisig_threshold))
      return false;
    if (!(multisig_signs == rhs.multisig_signs))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(session_id_sign == rhs.session_id_sign))
      return false;
    return true;
  }
  bool operator != (const node_list_lan_req_data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_list_lan_req_data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_list_lan_req_data &a, node_list_lan_req_data &b);

std::ostream& operator<<(std::ostream& out, const node_list_lan_req_data& obj);


class node_list_lan_req_body : public virtual ::apache::thrift::TBase {
 public:

  node_list_lan_req_body(const node_list_lan_req_body&);
  node_list_lan_req_body& operator=(const node_list_lan_req_body&);
  node_list_lan_req_body() : data() {
  }

  virtual ~node_list_lan_req_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_list_lan_req_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_list_lan_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_list_lan_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_list_lan_req_body &a, node_list_lan_req_body &b);

std::ostream& operator<<(std::ostream& out, const node_list_lan_req_body& obj);

typedef struct _node_list_lan_req__isset {
  _node_list_lan_req__isset() : body(false) {}
  bool body :1;
} _node_list_lan_req__isset;

class node_list_lan_req : public virtual ::apache::thrift::TMsgBase {
 public:

  node_list_lan_req(const node_list_lan_req&);
  node_list_lan_req& operator=(const node_list_lan_req&);
  node_list_lan_req() {
  }

  virtual ~node_list_lan_req() throw();
  node_list_lan_req_body body;

  _node_list_lan_req__isset __isset;

  void __set_body(const node_list_lan_req_body& val);

  bool operator == (const node_list_lan_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_list_lan_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_list_lan_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_list_lan_req &a, node_list_lan_req &b);

std::ostream& operator<<(std::ostream& out, const node_list_lan_req& obj);


class node_list_lan_rsp_body : public virtual ::apache::thrift::TBase {
 public:

  node_list_lan_rsp_body(const node_list_lan_rsp_body&);
  node_list_lan_rsp_body& operator=(const node_list_lan_rsp_body&);
  node_list_lan_rsp_body() : data() {
  }

  virtual ~node_list_lan_rsp_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_list_lan_rsp_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_list_lan_rsp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_list_lan_rsp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_list_lan_rsp_body &a, node_list_lan_rsp_body &b);

std::ostream& operator<<(std::ostream& out, const node_list_lan_rsp_body& obj);

typedef struct _node_list_lan_rsp__isset {
  _node_list_lan_rsp__isset() : body(false) {}
  bool body :1;
} _node_list_lan_rsp__isset;

class node_list_lan_rsp : public virtual ::apache::thrift::TMsgBase {
 public:

  node_list_lan_rsp(const node_list_lan_rsp&);
  node_list_lan_rsp& operator=(const node_list_lan_rsp&);
  node_list_lan_rsp() {
  }

  virtual ~node_list_lan_rsp() throw();
  node_list_lan_rsp_body body;

  _node_list_lan_rsp__isset __isset;

  void __set_body(const node_list_lan_rsp_body& val);

  bool operator == (const node_list_lan_rsp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_list_lan_rsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_list_lan_rsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_list_lan_rsp &a, node_list_lan_rsp &b);

std::ostream& operator<<(std::ostream& out, const node_list_lan_rsp& obj);


class node_create_lan_req_data : public virtual ::apache::thrift::TBase {
 public:

  node_create_lan_req_data(const node_create_lan_req_data&);
  node_create_lan_req_data& operator=(const node_create_lan_req_data&);
  node_create_lan_req_data() : additional(), wallet(), nonce(), sign(), multisig_threshold(0), session_id(), session_id_sign() {
  }

  virtual ~node_create_lan_req_data() throw();
  std::vector<std::string>  peer_nodes_list;
  std::string additional;
  std::string wallet;
  std::string nonce;
  std::string sign;
  std::vector<std::string>  multisig_wallets;
  int32_t multisig_threshold;
  std::vector<multisig_sign_item>  multisig_signs;
  std::string session_id;
  std::string session_id_sign;

  void __set_peer_nodes_list(const std::vector<std::string> & val);

  void __set_additional(const std::string& val);

  void __set_wallet(const std::string& val);

  void __set_nonce(const std::string& val);

  void __set_sign(const std::string& val);

  void __set_multisig_wallets(const std::vector<std::string> & val);

  void __set_multisig_threshold(const int32_t val);

  void __set_multisig_signs(const std::vector<multisig_sign_item> & val);

  void __set_session_id(const std::string& val);

  void __set_session_id_sign(const std::string& val);

  bool operator == (const node_create_lan_req_data & rhs) const
  {
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    if (!(additional == rhs.additional))
      return false;
    if (!(wallet == rhs.wallet))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(sign == rhs.sign))
      return false;
    if (!(multisig_wallets == rhs.multisig_wallets))
      return false;
    if (!(multisig_threshold == rhs.multisig_threshold))
      return false;
    if (!(multisig_signs == rhs.multisig_signs))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(session_id_sign == rhs.session_id_sign))
      return false;
    return true;
  }
  bool operator != (const node_create_lan_req_data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_create_lan_req_data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_create_lan_req_data &a, node_create_lan_req_data &b);

std::ostream& operator<<(std::ostream& out, const node_create_lan_req_data& obj);


class node_create_lan_req_body : public virtual ::apache::thrift::TBase {
 public:

  node_create_lan_req_body(const node_create_lan_req_body&);
  node_create_lan_req_body& operator=(const node_create_lan_req_body&);
  node_create_lan_req_body() : data() {
  }

  virtual ~node_create_lan_req_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_create_lan_req_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_create_lan_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_create_lan_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_create_lan_req_body &a, node_create_lan_req_body &b);

std::ostream& operator<<(std::ostream& out, const node_create_lan_req_body& obj);

typedef struct _node_create_lan_req__isset {
  _node_create_lan_req__isset() : body(false) {}
  bool body :1;
} _node_create_lan_req__isset;

class node_create_lan_req : public virtual ::apache::thrift::TMsgBase {
 public:

  node_create_lan_req(const node_create_lan_req&);
  node_create_lan_req& operator=(const node_create_lan_req&);
  node_create_lan_req() {
  }

  virtual ~node_create_lan_req() throw();
  node_create_lan_req_body body;

  _node_create_lan_req__isset __isset;

  void __set_body(const node_create_lan_req_body& val);

  bool operator == (const node_create_lan_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_create_lan_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_create_lan_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_create_lan_req &a, node_create_lan_req &b);

std::ostream& operator<<(std::ostream& out, const node_create_lan_req& obj);


class node_create_lan_rsp_body : public virtual ::apache::thrift::TBase {
 public:

  node_create_lan_rsp_body(const node_create_lan_rsp_body&);
  node_create_lan_rsp_body& operator=(const node_create_lan_rsp_body&);
  node_create_lan_rsp_body() : data() {
  }

  virtual ~node_create_lan_rsp_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_create_lan_rsp_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_create_lan_rsp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_create_lan_rsp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_create_lan_rsp_body &a, node_create_lan_rsp_body &b);

std::ostream& operator<<(std::ostream& out, const node_create_lan_rsp_body& obj);

typedef struct _node_create_lan_rsp__isset {
  _node_create_lan_rsp__isset() : body(false) {}
  bool body :1;
} _node_create_lan_rsp__isset;

class node_create_lan_rsp : public virtual ::apache::thrift::TMsgBase {
 public:

  node_create_lan_rsp(const node_create_lan_rsp&);
  node_create_lan_rsp& operator=(const node_create_lan_rsp&);
  node_create_lan_rsp() {
  }

  virtual ~node_create_lan_rsp() throw();
  node_create_lan_rsp_body body;

  _node_create_lan_rsp__isset __isset;

  void __set_body(const node_create_lan_rsp_body& val);

  bool operator == (const node_create_lan_rsp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_create_lan_rsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_create_lan_rsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_create_lan_rsp &a, node_create_lan_rsp &b);

std::ostream& operator<<(std::ostream& out, const node_create_lan_rsp& obj);


class node_delete_lan_req_data : public virtual ::apache::thrift::TBase {
 public:

  node_delete_lan_req_data(const node_delete_lan_req_data&);
  node_delete_lan_req_data& operator=(const node_delete_lan_req_data&);
  node_delete_lan_req_data() : network_id(), additional(), wallet(), nonce(), sign(), multisig_threshold(0), session_id(), session_id_sign() {
  }

  virtual ~node_delete_lan_req_data() throw();
  std::string network_id;
  std::vector<std::string>  peer_nodes_list;
  std::string additional;
  std::string wallet;
  std::string nonce;
  std::string sign;
  std::vector<std::string>  multisig_wallets;
  int32_t multisig_threshold;
  std::vector<multisig_sign_item>  multisig_signs;
  std::string session_id;
  std::string session_id_sign;

  void __set_network_id(const std::string& val);

  void __set_peer_nodes_list(const std::vector<std::string> & val);

  void __set_additional(const std::string& val);

  void __set_wallet(const std::string& val);

  void __set_nonce(const std::string& val);

  void __set_sign(const std::string& val);

  void __set_multisig_wallets(const std::vector<std::string> & val);

  void __set_multisig_threshold(const int32_t val);

  void __set_multisig_signs(const std::vector<multisig_sign_item> & val);

  void __set_session_id(const std::string& val);

  void __set_session_id_sign(const std::string& val);

  bool operator == (const node_delete_lan_req_data & rhs) const
  {
    if (!(network_id == rhs.network_id))
      return false;
    if (!(peer_nodes_list == rhs.peer_nodes_list))
      return false;
    if (!(additional == rhs.additional))
      return false;
    if (!(wallet == rhs.wallet))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(sign == rhs.sign))
      return false;
    if (!(multisig_wallets == rhs.multisig_wallets))
      return false;
    if (!(multisig_threshold == rhs.multisig_threshold))
      return false;
    if (!(multisig_signs == rhs.multisig_signs))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(session_id_sign == rhs.session_id_sign))
      return false;
    return true;
  }
  bool operator != (const node_delete_lan_req_data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_delete_lan_req_data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_delete_lan_req_data &a, node_delete_lan_req_data &b);

std::ostream& operator<<(std::ostream& out, const node_delete_lan_req_data& obj);


class node_delete_lan_req_body : public virtual ::apache::thrift::TBase {
 public:

  node_delete_lan_req_body(const node_delete_lan_req_body&);
  node_delete_lan_req_body& operator=(const node_delete_lan_req_body&);
  node_delete_lan_req_body() : data() {
  }

  virtual ~node_delete_lan_req_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_delete_lan_req_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_delete_lan_req_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_delete_lan_req_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_delete_lan_req_body &a, node_delete_lan_req_body &b);

std::ostream& operator<<(std::ostream& out, const node_delete_lan_req_body& obj);

typedef struct _node_delete_lan_req__isset {
  _node_delete_lan_req__isset() : body(false) {}
  bool body :1;
} _node_delete_lan_req__isset;

class node_delete_lan_req : public virtual ::apache::thrift::TMsgBase {
 public:

  node_delete_lan_req(const node_delete_lan_req&);
  node_delete_lan_req& operator=(const node_delete_lan_req&);
  node_delete_lan_req() {
  }

  virtual ~node_delete_lan_req() throw();
  node_delete_lan_req_body body;

  _node_delete_lan_req__isset __isset;

  void __set_body(const node_delete_lan_req_body& val);

  bool operator == (const node_delete_lan_req & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_delete_lan_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_delete_lan_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_delete_lan_req &a, node_delete_lan_req &b);

std::ostream& operator<<(std::ostream& out, const node_delete_lan_req& obj);


class node_delete_lan_rsp_body : public virtual ::apache::thrift::TBase {
 public:

  node_delete_lan_rsp_body(const node_delete_lan_rsp_body&);
  node_delete_lan_rsp_body& operator=(const node_delete_lan_rsp_body&);
  node_delete_lan_rsp_body() : data() {
  }

  virtual ~node_delete_lan_rsp_body() throw();
  std::string data;

  void __set_data(const std::string& val);

  bool operator == (const node_delete_lan_rsp_body & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const node_delete_lan_rsp_body &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_delete_lan_rsp_body & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_delete_lan_rsp_body &a, node_delete_lan_rsp_body &b);

std::ostream& operator<<(std::ostream& out, const node_delete_lan_rsp_body& obj);

typedef struct _node_delete_lan_rsp__isset {
  _node_delete_lan_rsp__isset() : body(false) {}
  bool body :1;
} _node_delete_lan_rsp__isset;

class node_delete_lan_rsp : public virtual ::apache::thrift::TMsgBase {
 public:

  node_delete_lan_rsp(const node_delete_lan_rsp&);
  node_delete_lan_rsp& operator=(const node_delete_lan_rsp&);
  node_delete_lan_rsp() {
  }

  virtual ~node_delete_lan_rsp() throw();
  node_delete_lan_rsp_body body;

  _node_delete_lan_rsp__isset __isset;

  void __set_body(const node_delete_lan_rsp_body& val);

  bool operator == (const node_delete_lan_rsp & rhs) const
  {
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const node_delete_lan_rsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node_delete_lan_rsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(node_delete_lan_rsp &a, node_delete_lan_rsp &b);

std::ostream& operator<<(std::ostream& out, const node_delete_lan_rsp& obj);

} // namespace

#endif
