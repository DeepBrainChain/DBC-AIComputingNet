/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vm_task_result_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


vm_task_thread_result::~vm_task_thread_result() noexcept {
}


void vm_task_thread_result::__set_domain_name(const std::string& val) {
  this->domain_name = val;
}

void vm_task_thread_result::__set_operation(const int32_t val) {
  this->operation = val;
}

void vm_task_thread_result::__set_result_code(const int32_t val) {
  this->result_code = val;
}

void vm_task_thread_result::__set_result_message(const std::string& val) {
  this->result_message = val;
}

void vm_task_thread_result::__set_vm_local_ip(const std::string& val) {
  this->vm_local_ip = val;
__isset.vm_local_ip = true;
}
std::ostream& operator<<(std::ostream& out, const vm_task_thread_result& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vm_task_thread_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_domain_name = false;
  bool isset_operation = false;
  bool isset_result_code = false;
  bool isset_result_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain_name);
          isset_domain_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operation);
          isset_operation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result_code);
          isset_result_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result_message);
          isset_result_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vm_local_ip);
          this->__isset.vm_local_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_domain_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_operation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t vm_task_thread_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vm_task_thread_result");

  xfer += oprot->writeFieldBegin("domain_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->domain_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operation", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->operation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_code", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->result_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_message", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->result_message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vm_local_ip) {
    xfer += oprot->writeFieldBegin("vm_local_ip", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->vm_local_ip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vm_task_thread_result &a, vm_task_thread_result &b) {
  using ::std::swap;
  swap(a.domain_name, b.domain_name);
  swap(a.operation, b.operation);
  swap(a.result_code, b.result_code);
  swap(a.result_message, b.result_message);
  swap(a.vm_local_ip, b.vm_local_ip);
  swap(a.__isset, b.__isset);
}

vm_task_thread_result::vm_task_thread_result(const vm_task_thread_result& other0) {
  domain_name = other0.domain_name;
  operation = other0.operation;
  result_code = other0.result_code;
  result_message = other0.result_message;
  vm_local_ip = other0.vm_local_ip;
  __isset = other0.__isset;
}
vm_task_thread_result& vm_task_thread_result::operator=(const vm_task_thread_result& other1) {
  domain_name = other1.domain_name;
  operation = other1.operation;
  result_code = other1.result_code;
  result_message = other1.result_message;
  vm_local_ip = other1.vm_local_ip;
  __isset = other1.__isset;
  return *this;
}
void vm_task_thread_result::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vm_task_thread_result(";
  out << "domain_name=" << to_string(domain_name);
  out << ", " << "operation=" << to_string(operation);
  out << ", " << "result_code=" << to_string(result_code);
  out << ", " << "result_message=" << to_string(result_message);
  out << ", " << "vm_local_ip="; (__isset.vm_local_ip ? (out << to_string(vm_local_ip)) : (out << "<null>"));
  out << ")";
}

} // namespace
