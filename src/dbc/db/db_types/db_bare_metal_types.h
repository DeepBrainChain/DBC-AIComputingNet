/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef db_bare_metal_TYPES_H
#define db_bare_metal_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <thrift/stdcxx.h>

#include "network/protocol/protocol.h"
#include "network/protocol/net_message.h"
#include "util/TToString.h"

namespace dbc {

class db_bare_metal;

typedef struct _db_bare_metal__isset {
  _db_bare_metal__isset() : desc(false), ipmi_hostname(false), ipmi_username(false), ipmi_password(false) {}
  bool desc :1;
  bool ipmi_hostname :1;
  bool ipmi_username :1;
  bool ipmi_password :1;
} _db_bare_metal__isset;

class db_bare_metal : public virtual ::apache::thrift::TBase {
 public:

  db_bare_metal(const db_bare_metal&);
  db_bare_metal& operator=(const db_bare_metal&);
  db_bare_metal() : node_id(), node_private_key(), uuid(), desc(), ipmi_hostname(), ipmi_username(), ipmi_password() {
  }

  virtual ~db_bare_metal() throw();
  std::string node_id;
  std::string node_private_key;
  std::string uuid;
  std::string desc;
  std::string ipmi_hostname;
  std::string ipmi_username;
  std::string ipmi_password;

  _db_bare_metal__isset __isset;

  void __set_node_id(const std::string& val);

  void __set_node_private_key(const std::string& val);

  void __set_uuid(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_ipmi_hostname(const std::string& val);

  void __set_ipmi_username(const std::string& val);

  void __set_ipmi_password(const std::string& val);

  bool operator == (const db_bare_metal & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(node_private_key == rhs.node_private_key))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    if (__isset.ipmi_hostname != rhs.__isset.ipmi_hostname)
      return false;
    else if (__isset.ipmi_hostname && !(ipmi_hostname == rhs.ipmi_hostname))
      return false;
    if (__isset.ipmi_username != rhs.__isset.ipmi_username)
      return false;
    else if (__isset.ipmi_username && !(ipmi_username == rhs.ipmi_username))
      return false;
    if (__isset.ipmi_password != rhs.__isset.ipmi_password)
      return false;
    else if (__isset.ipmi_password && !(ipmi_password == rhs.ipmi_password))
      return false;
    return true;
  }
  bool operator != (const db_bare_metal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const db_bare_metal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(db_bare_metal &a, db_bare_metal &b);

std::ostream& operator<<(std::ostream& out, const db_bare_metal& obj);

} // namespace

#endif
