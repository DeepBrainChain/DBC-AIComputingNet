/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "monitors_db_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


db_monitor_server::~db_monitor_server() throw() {
}


void db_monitor_server::__set_host(const std::string& val) {
  this->host = val;
}

void db_monitor_server::__set_port(const std::string& val) {
  this->port = val;
}
std::ostream& operator<<(std::ostream& out, const db_monitor_server& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t db_monitor_server::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_host = false;
  bool isset_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          isset_host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port);
          isset_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_host)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t db_monitor_server::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("db_monitor_server");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(db_monitor_server &a, db_monitor_server &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.port, b.port);
}

db_monitor_server::db_monitor_server(const db_monitor_server& other0) {
  host = other0.host;
  port = other0.port;
}
db_monitor_server& db_monitor_server::operator=(const db_monitor_server& other1) {
  host = other1.host;
  port = other1.port;
  return *this;
}
void db_monitor_server::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "db_monitor_server(";
  out << "host=" << to_string(host);
  out << ", " << "port=" << to_string(port);
  out << ")";
}


db_wallet_monitors::~db_wallet_monitors() throw() {
}


void db_wallet_monitors::__set_wallet(const std::string& val) {
  this->wallet = val;
}

void db_wallet_monitors::__set_monitors(const std::vector<db_monitor_server> & val) {
  this->monitors = val;
}
std::ostream& operator<<(std::ostream& out, const db_wallet_monitors& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t db_wallet_monitors::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_wallet = false;
  bool isset_monitors = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wallet);
          isset_wallet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->monitors.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->monitors.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->monitors[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_monitors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_wallet)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_monitors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t db_wallet_monitors::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("db_wallet_monitors");

  xfer += oprot->writeFieldBegin("wallet", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->wallet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("monitors", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->monitors.size()));
    std::vector<db_monitor_server> ::const_iterator _iter7;
    for (_iter7 = this->monitors.begin(); _iter7 != this->monitors.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(db_wallet_monitors &a, db_wallet_monitors &b) {
  using ::std::swap;
  swap(a.wallet, b.wallet);
  swap(a.monitors, b.monitors);
}

db_wallet_monitors::db_wallet_monitors(const db_wallet_monitors& other8) {
  wallet = other8.wallet;
  monitors = other8.monitors;
}
db_wallet_monitors& db_wallet_monitors::operator=(const db_wallet_monitors& other9) {
  wallet = other9.wallet;
  monitors = other9.monitors;
  return *this;
}
void db_wallet_monitors::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "db_wallet_monitors(";
  out << "wallet=" << to_string(wallet);
  out << ", " << "monitors=" << to_string(monitors);
  out << ")";
}

} // namespace
