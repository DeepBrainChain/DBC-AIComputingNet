/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "db_task_snapshot_types.h"
#include <algorithm>
#include <ostream>

namespace dbc {


	snapshot_info::~snapshot_info() throw() {
	}


	void snapshot_info::__set_name(const std::string& val) {
		this->name = val;
	}

	void snapshot_info::__set_file(const std::string& val) {
		this->file = val;
	}

	void snapshot_info::__set_create_time(const int64_t val) {
		this->create_time = val;
	}

	void snapshot_info::__set_desc(const std::string& val) {
		this->desc = val;
	}
	std::ostream& operator<<(std::ostream& out, const snapshot_info& obj)
	{
		obj.printTo(out);
		return out;
	}


	uint32_t snapshot_info::read(::apache::thrift::protocol::TProtocol* iprot) {

		::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;

		bool isset_name = false;
		bool isset_file = false;
		bool isset_create_time = false;
		bool isset_desc = false;

		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->name);
					isset_name = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 2:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->file);
					isset_file = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 3:
				if (ftype == ::apache::thrift::protocol::T_I64) {
					xfer += iprot->readI64(this->create_time);
					isset_create_time = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 4:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->desc);
					isset_desc = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		if (!isset_name)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_file)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_create_time)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_desc)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		return xfer;
	}

	uint32_t snapshot_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("snapshot_info");

		xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
		xfer += oprot->writeString(this->name);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_STRING, 2);
		xfer += oprot->writeString(this->file);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I64, 3);
		xfer += oprot->writeI64(this->create_time);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 4);
		xfer += oprot->writeString(this->desc);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(snapshot_info& a, snapshot_info& b) {
		using ::std::swap;
		swap(a.name, b.name);
		swap(a.file, b.file);
		swap(a.create_time, b.create_time);
		swap(a.desc, b.desc);
	}

	snapshot_info::snapshot_info(const snapshot_info& other0) {
		name = other0.name;
		file = other0.file;
		create_time = other0.create_time;
		desc = other0.desc;
	}
	snapshot_info& snapshot_info::operator=(const snapshot_info& other1) {
		name = other1.name;
		file = other1.file;
		create_time = other1.create_time;
		desc = other1.desc;
		return *this;
	}
	void snapshot_info::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "snapshot_info(";
		out << "name=" << to_string(name);
		out << ", " << "file=" << to_string(file);
		out << ", " << "create_time=" << to_string(create_time);
		out << ", " << "desc=" << to_string(desc);
		out << ")";
	}


	db_snapshot_info::~db_snapshot_info() throw() {
	}


	void db_snapshot_info::__set_task_id(const std::string& val) {
		this->task_id = val;
	}

	void db_snapshot_info::__set_snapshots(const std::vector<snapshot_info>& val) {
		this->snapshots = val;
	}
	std::ostream& operator<<(std::ostream& out, const db_snapshot_info& obj)
	{
		obj.printTo(out);
		return out;
	}


	uint32_t db_snapshot_info::read(::apache::thrift::protocol::TProtocol* iprot) {

		::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;

		bool isset_task_id = false;
		bool isset_snapshots = false;

		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->task_id);
					isset_task_id = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 2:
				if (ftype == ::apache::thrift::protocol::T_LIST) {
					{
						this->snapshots.clear();
						uint32_t _size2;
						::apache::thrift::protocol::TType _etype5;
						xfer += iprot->readListBegin(_etype5, _size2);
						this->snapshots.resize(_size2);
						uint32_t _i6;
						for (_i6 = 0; _i6 < _size2; ++_i6)
						{
							xfer += this->snapshots[_i6].read(iprot);
						}
						xfer += iprot->readListEnd();
					}
					isset_snapshots = true;
				}
				else {
					xfer += iprot->skip(ftype);
				}
				break;
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		if (!isset_task_id)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_snapshots)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		return xfer;
	}

	uint32_t db_snapshot_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("db_snapshot_info");

		xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
		xfer += oprot->writeString(this->task_id);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("snapshots", ::apache::thrift::protocol::T_LIST, 2);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->snapshots.size()));
			std::vector<snapshot_info> ::const_iterator _iter7;
			for (_iter7 = this->snapshots.begin(); _iter7 != this->snapshots.end(); ++_iter7)
			{
				xfer += (*_iter7).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(db_snapshot_info& a, db_snapshot_info& b) {
		using ::std::swap;
		swap(a.task_id, b.task_id);
		swap(a.snapshots, b.snapshots);
	}

	db_snapshot_info::db_snapshot_info(const db_snapshot_info& other8) {
		task_id = other8.task_id;
		snapshots = other8.snapshots;
	}
	db_snapshot_info& db_snapshot_info::operator=(const db_snapshot_info& other9) {
		task_id = other9.task_id;
		snapshots = other9.snapshots;
		return *this;
	}
	void db_snapshot_info::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "db_snapshot_info(";
		out << "task_id=" << to_string(task_id);
		out << ", " << "snapshots=" << to_string(snapshots);
		out << ")";
	}

} // namespace
