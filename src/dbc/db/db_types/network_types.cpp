/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "network_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


networkInfo::~networkInfo() throw() {
}


void networkInfo::__set_networkId(const std::string& val) {
  this->networkId = val;
}

void networkInfo::__set_bridgeName(const std::string& val) {
  this->bridgeName = val;
}

void networkInfo::__set_vxlanName(const std::string& val) {
  this->vxlanName = val;
}

void networkInfo::__set_vxlanVni(const std::string& val) {
  this->vxlanVni = val;
}

void networkInfo::__set_ipCidr(const std::string& val) {
  this->ipCidr = val;
}

void networkInfo::__set_ipStart(const std::string& val) {
  this->ipStart = val;
}

void networkInfo::__set_ipEnd(const std::string& val) {
  this->ipEnd = val;
}

void networkInfo::__set_dhcpInterface(const std::string& val) {
  this->dhcpInterface = val;
__isset.dhcpInterface = true;
}

void networkInfo::__set_machineId(const std::string& val) {
  this->machineId = val;
__isset.machineId = true;
}

void networkInfo::__set_rentWallet(const std::string& val) {
  this->rentWallet = val;
__isset.rentWallet = true;
}

void networkInfo::__set_members(const std::vector<std::string> & val) {
  this->members = val;
__isset.members = true;
}

void networkInfo::__set_lastUseTime(const int64_t val) {
  this->lastUseTime = val;
__isset.lastUseTime = true;
}

void networkInfo::__set_nativeFlags(const int32_t val) {
  this->nativeFlags = val;
__isset.nativeFlags = true;
}

void networkInfo::__set_lastUpdateTime(const int64_t val) {
  this->lastUpdateTime = val;
__isset.lastUpdateTime = true;
}
std::ostream& operator<<(std::ostream& out, const networkInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t networkInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_networkId = false;
  bool isset_bridgeName = false;
  bool isset_vxlanName = false;
  bool isset_vxlanVni = false;
  bool isset_ipCidr = false;
  bool isset_ipStart = false;
  bool isset_ipEnd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->networkId);
          isset_networkId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bridgeName);
          isset_bridgeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vxlanName);
          isset_vxlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vxlanVni);
          isset_vxlanVni = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipCidr);
          isset_ipCidr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipStart);
          isset_ipStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipEnd);
          isset_ipEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dhcpInterface);
          this->__isset.dhcpInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->machineId);
          this->__isset.machineId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rentWallet);
          this->__isset.rentWallet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->members.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->members[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUseTime);
          this->__isset.lastUseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nativeFlags);
          this->__isset.nativeFlags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_networkId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bridgeName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vxlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vxlanVni)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipCidr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipStart)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipEnd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t networkInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("networkInfo");

  xfer += oprot->writeFieldBegin("networkId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->networkId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bridgeName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->bridgeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vxlanName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->vxlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vxlanVni", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->vxlanVni);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipCidr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ipCidr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipStart", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ipStart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipEnd", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ipEnd);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dhcpInterface) {
    xfer += oprot->writeFieldBegin("dhcpInterface", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->dhcpInterface);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.machineId) {
    xfer += oprot->writeFieldBegin("machineId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->machineId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rentWallet) {
    xfer += oprot->writeFieldBegin("rentWallet", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->rentWallet);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.members) {
    xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->members.size()));
      std::vector<std::string> ::const_iterator _iter5;
      for (_iter5 = this->members.begin(); _iter5 != this->members.end(); ++_iter5)
      {
        xfer += oprot->writeString((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastUseTime) {
    xfer += oprot->writeFieldBegin("lastUseTime", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->lastUseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nativeFlags) {
    xfer += oprot->writeFieldBegin("nativeFlags", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->nativeFlags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastUpdateTime) {
    xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->lastUpdateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(networkInfo &a, networkInfo &b) {
  using ::std::swap;
  swap(a.networkId, b.networkId);
  swap(a.bridgeName, b.bridgeName);
  swap(a.vxlanName, b.vxlanName);
  swap(a.vxlanVni, b.vxlanVni);
  swap(a.ipCidr, b.ipCidr);
  swap(a.ipStart, b.ipStart);
  swap(a.ipEnd, b.ipEnd);
  swap(a.dhcpInterface, b.dhcpInterface);
  swap(a.machineId, b.machineId);
  swap(a.rentWallet, b.rentWallet);
  swap(a.members, b.members);
  swap(a.lastUseTime, b.lastUseTime);
  swap(a.nativeFlags, b.nativeFlags);
  swap(a.lastUpdateTime, b.lastUpdateTime);
  swap(a.__isset, b.__isset);
}

networkInfo::networkInfo(const networkInfo& other6) {
  networkId = other6.networkId;
  bridgeName = other6.bridgeName;
  vxlanName = other6.vxlanName;
  vxlanVni = other6.vxlanVni;
  ipCidr = other6.ipCidr;
  ipStart = other6.ipStart;
  ipEnd = other6.ipEnd;
  dhcpInterface = other6.dhcpInterface;
  machineId = other6.machineId;
  rentWallet = other6.rentWallet;
  members = other6.members;
  lastUseTime = other6.lastUseTime;
  nativeFlags = other6.nativeFlags;
  lastUpdateTime = other6.lastUpdateTime;
  __isset = other6.__isset;
}
networkInfo& networkInfo::operator=(const networkInfo& other7) {
  networkId = other7.networkId;
  bridgeName = other7.bridgeName;
  vxlanName = other7.vxlanName;
  vxlanVni = other7.vxlanVni;
  ipCidr = other7.ipCidr;
  ipStart = other7.ipStart;
  ipEnd = other7.ipEnd;
  dhcpInterface = other7.dhcpInterface;
  machineId = other7.machineId;
  rentWallet = other7.rentWallet;
  members = other7.members;
  lastUseTime = other7.lastUseTime;
  nativeFlags = other7.nativeFlags;
  lastUpdateTime = other7.lastUpdateTime;
  __isset = other7.__isset;
  return *this;
}
void networkInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "networkInfo(";
  out << "networkId=" << to_string(networkId);
  out << ", " << "bridgeName=" << to_string(bridgeName);
  out << ", " << "vxlanName=" << to_string(vxlanName);
  out << ", " << "vxlanVni=" << to_string(vxlanVni);
  out << ", " << "ipCidr=" << to_string(ipCidr);
  out << ", " << "ipStart=" << to_string(ipStart);
  out << ", " << "ipEnd=" << to_string(ipEnd);
  out << ", " << "dhcpInterface="; (__isset.dhcpInterface ? (out << to_string(dhcpInterface)) : (out << "<null>"));
  out << ", " << "machineId="; (__isset.machineId ? (out << to_string(machineId)) : (out << "<null>"));
  out << ", " << "rentWallet="; (__isset.rentWallet ? (out << to_string(rentWallet)) : (out << "<null>"));
  out << ", " << "members="; (__isset.members ? (out << to_string(members)) : (out << "<null>"));
  out << ", " << "lastUseTime="; (__isset.lastUseTime ? (out << to_string(lastUseTime)) : (out << "<null>"));
  out << ", " << "nativeFlags="; (__isset.nativeFlags ? (out << to_string(nativeFlags)) : (out << "<null>"));
  out << ", " << "lastUpdateTime="; (__isset.lastUpdateTime ? (out << to_string(lastUpdateTime)) : (out << "<null>"));
  out << ")";
}

} // namespace
