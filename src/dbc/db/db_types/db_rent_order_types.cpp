/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "db_rent_order_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


db_rent_order::~db_rent_order() throw() {
}


void db_rent_order::__set_id(const std::string& val) {
  this->id = val;
}

void db_rent_order::__set_renter(const std::string& val) {
  this->renter = val;
}

void db_rent_order::__set_rent_end(const int64_t val) {
  this->rent_end = val;
}

void db_rent_order::__set_gpu_index(const std::vector<int32_t> & val) {
  this->gpu_index = val;
}

void db_rent_order::__set_gpu_num(const int32_t val) {
  this->gpu_num = val;
}

void db_rent_order::__set_rent_status(const std::string& val) {
  this->rent_status = val;
}
std::ostream& operator<<(std::ostream& out, const db_rent_order& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t db_rent_order::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_renter = false;
  bool isset_rent_end = false;
  bool isset_gpu_index = false;
  bool isset_gpu_num = false;
  bool isset_rent_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->renter);
          isset_renter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rent_end);
          isset_rent_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gpu_index.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->gpu_index.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->gpu_index[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gpu_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gpu_num);
          isset_gpu_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rent_status);
          isset_rent_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_renter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rent_end)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gpu_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gpu_num)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rent_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t db_rent_order::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("db_rent_order");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("renter", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->renter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rent_end", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->rent_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gpu_index", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->gpu_index.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->gpu_index.begin(); _iter5 != this->gpu_index.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gpu_num", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->gpu_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rent_status", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->rent_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(db_rent_order &a, db_rent_order &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.renter, b.renter);
  swap(a.rent_end, b.rent_end);
  swap(a.gpu_index, b.gpu_index);
  swap(a.gpu_num, b.gpu_num);
  swap(a.rent_status, b.rent_status);
}

db_rent_order::db_rent_order(const db_rent_order& other6) {
  id = other6.id;
  renter = other6.renter;
  rent_end = other6.rent_end;
  gpu_index = other6.gpu_index;
  gpu_num = other6.gpu_num;
  rent_status = other6.rent_status;
}
db_rent_order& db_rent_order::operator=(const db_rent_order& other7) {
  id = other7.id;
  renter = other7.renter;
  rent_end = other7.rent_end;
  gpu_index = other7.gpu_index;
  gpu_num = other7.gpu_num;
  rent_status = other7.rent_status;
  return *this;
}
void db_rent_order::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "db_rent_order(";
  out << "id=" << to_string(id);
  out << ", " << "renter=" << to_string(renter);
  out << ", " << "rent_end=" << to_string(rent_end);
  out << ", " << "gpu_index=" << to_string(gpu_index);
  out << ", " << "gpu_num=" << to_string(gpu_num);
  out << ", " << "rent_status=" << to_string(rent_status);
  out << ")";
}

} // namespace
