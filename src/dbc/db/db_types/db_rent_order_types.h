/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef db_rent_order_TYPES_H
#define db_rent_order_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <thrift/stdcxx.h>

#include "network/protocol/protocol.h"
#include "network/protocol/net_message.h"
#include "util/TToString.h"


namespace dbc {

class db_rent_order;


class db_rent_order : public virtual ::apache::thrift::TBase {
 public:

  db_rent_order(const db_rent_order&);
  db_rent_order& operator=(const db_rent_order&);
  db_rent_order() : id(), renter(), rent_end(0), gpu_num(0), rent_status() {
  }

  virtual ~db_rent_order() throw();
  std::string id;
  std::string renter;
  int64_t rent_end;
  std::vector<int32_t>  gpu_index;
  int32_t gpu_num;
  std::string rent_status;

  void __set_id(const std::string& val);

  void __set_renter(const std::string& val);

  void __set_rent_end(const int64_t val);

  void __set_gpu_index(const std::vector<int32_t> & val);

  void __set_gpu_num(const int32_t val);

  void __set_rent_status(const std::string& val);

  bool operator == (const db_rent_order & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(renter == rhs.renter))
      return false;
    if (!(rent_end == rhs.rent_end))
      return false;
    if (!(gpu_index == rhs.gpu_index))
      return false;
    if (!(gpu_num == rhs.gpu_num))
      return false;
    if (!(rent_status == rhs.rent_status))
      return false;
    return true;
  }
  bool operator != (const db_rent_order &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const db_rent_order & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(db_rent_order &a, db_rent_order &b);

std::ostream& operator<<(std::ostream& out, const db_rent_order& obj);

} // namespace

#endif
