/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "db_bare_metal_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc {


db_bare_metal::~db_bare_metal() throw() {
}


void db_bare_metal::__set_node_id(const std::string& val) {
  this->node_id = val;
}

void db_bare_metal::__set_node_private_key(const std::string& val) {
  this->node_private_key = val;
}

void db_bare_metal::__set_uuid(const std::string& val) {
  this->uuid = val;
}

void db_bare_metal::__set_desc(const std::string& val) {
  this->desc = val;
__isset.desc = true;
}

void db_bare_metal::__set_ipmi_hostname(const std::string& val) {
  this->ipmi_hostname = val;
__isset.ipmi_hostname = true;
}

void db_bare_metal::__set_ipmi_username(const std::string& val) {
  this->ipmi_username = val;
__isset.ipmi_username = true;
}

void db_bare_metal::__set_ipmi_password(const std::string& val) {
  this->ipmi_password = val;
__isset.ipmi_password = true;
}
std::ostream& operator<<(std::ostream& out, const db_bare_metal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t db_bare_metal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_node_id = false;
  bool isset_node_private_key = false;
  bool isset_uuid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          isset_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_private_key);
          isset_node_private_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uuid);
          isset_uuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipmi_hostname);
          this->__isset.ipmi_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipmi_username);
          this->__isset.ipmi_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipmi_password);
          this->__isset.ipmi_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_node_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_node_private_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uuid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t db_bare_metal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("db_bare_metal");

  xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->node_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node_private_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->node_private_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uuid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->uuid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipmi_hostname) {
    xfer += oprot->writeFieldBegin("ipmi_hostname", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->ipmi_hostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipmi_username) {
    xfer += oprot->writeFieldBegin("ipmi_username", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ipmi_username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipmi_password) {
    xfer += oprot->writeFieldBegin("ipmi_password", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->ipmi_password);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(db_bare_metal &a, db_bare_metal &b) {
  using ::std::swap;
  swap(a.node_id, b.node_id);
  swap(a.node_private_key, b.node_private_key);
  swap(a.uuid, b.uuid);
  swap(a.desc, b.desc);
  swap(a.ipmi_hostname, b.ipmi_hostname);
  swap(a.ipmi_username, b.ipmi_username);
  swap(a.ipmi_password, b.ipmi_password);
  swap(a.__isset, b.__isset);
}

db_bare_metal::db_bare_metal(const db_bare_metal& other0) {
  node_id = other0.node_id;
  node_private_key = other0.node_private_key;
  uuid = other0.uuid;
  desc = other0.desc;
  ipmi_hostname = other0.ipmi_hostname;
  ipmi_username = other0.ipmi_username;
  ipmi_password = other0.ipmi_password;
  __isset = other0.__isset;
}
db_bare_metal& db_bare_metal::operator=(const db_bare_metal& other1) {
  node_id = other1.node_id;
  node_private_key = other1.node_private_key;
  uuid = other1.uuid;
  desc = other1.desc;
  ipmi_hostname = other1.ipmi_hostname;
  ipmi_username = other1.ipmi_username;
  ipmi_password = other1.ipmi_password;
  __isset = other1.__isset;
  return *this;
}
void db_bare_metal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "db_bare_metal(";
  out << "node_id=" << to_string(node_id);
  out << ", " << "node_private_key=" << to_string(node_private_key);
  out << ", " << "uuid=" << to_string(uuid);
  out << ", " << "desc="; (__isset.desc ? (out << to_string(desc)) : (out << "<null>"));
  out << ", " << "ipmi_hostname="; (__isset.ipmi_hostname ? (out << to_string(ipmi_hostname)) : (out << "<null>"));
  out << ", " << "ipmi_username="; (__isset.ipmi_username ? (out << to_string(ipmi_username)) : (out << "<null>"));
  out << ", " << "ipmi_password="; (__isset.ipmi_password ? (out << to_string(ipmi_password)) : (out << "<null>"));
  out << ")";
}

} // namespace
