/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef db_wallet_renttask_TYPES_H
#define db_wallet_renttask_TYPES_H

#include <iosfwd>
#include "network/protocol/protocol.h"
#include "network/protocol/net_message.h"
#include "util/TToString.h"

namespace dbc {

    class db_wallet_renttask;


    class db_wallet_renttask : public virtual ::apache::thrift::TBase {
    public:

        db_wallet_renttask(const db_wallet_renttask&);
        db_wallet_renttask& operator=(const db_wallet_renttask&);
        db_wallet_renttask() : rent_wallet(), rent_end(0) {
        }

        virtual ~db_wallet_renttask() throw();
        std::string rent_wallet;
        std::vector<std::string>  task_ids;
        int64_t rent_end;

        void __set_rent_wallet(const std::string& val);

        void __set_task_ids(const std::vector<std::string>& val);

        void __set_rent_end(const int64_t val);

        bool operator == (const db_wallet_renttask& rhs) const
        {
            if (!(rent_wallet == rhs.rent_wallet))
                return false;
            if (!(task_ids == rhs.task_ids))
                return false;
            if (!(rent_end == rhs.rent_end))
                return false;
            return true;
        }
        bool operator != (const db_wallet_renttask& rhs) const {
            return !(*this == rhs);
        }

        bool operator < (const db_wallet_renttask&) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        virtual void printTo(std::ostream& out) const;
    };

    void swap(db_wallet_renttask& a, db_wallet_renttask& b);

    std::ostream& operator<<(std::ostream& out, const db_wallet_renttask& obj);

} // namespace

#endif
