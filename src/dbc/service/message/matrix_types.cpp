/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "matrix_types.h"

#include <algorithm>
#include <ostream>

namespace dbc {


    empty::~empty() throw() {
    }

    std::ostream& operator<<(std::ostream& out, const empty& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t empty::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            xfer += iprot->skip(ftype);
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t empty::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("empty");

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(empty &a, empty &b) {
        using ::std::swap;
        (void) a;
        (void) b;
    }

    empty::empty(const empty& other0) {
        (void) other0;
    }
    empty& empty::operator=(const empty& other1) {
        (void) other1;
        return *this;
    }
    void empty::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "empty(";
        out << ")";
    }


    network_address::~network_address() throw() {
    }


    void network_address::__set_ip(const std::string& val) {
        this->ip = val;
    }

    void network_address::__set_port(const int16_t val) {
        this->port = val;
    }
    std::ostream& operator<<(std::ostream& out, const network_address& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t network_address::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_ip = false;
        bool isset_port = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->ip);
                        isset_ip = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_I16) {
                            xfer += iprot->readI16(this->port);
                            isset_port = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_ip)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_port)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t network_address::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("network_address");

        xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->ip);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
        xfer += oprot->writeI16(this->port);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(network_address &a, network_address &b) {
        using ::std::swap;
        swap(a.ip, b.ip);
        swap(a.port, b.port);
    }

    network_address::network_address(const network_address& other2) {
        ip = other2.ip;
        port = other2.port;
    }
    network_address& network_address::operator=(const network_address& other3) {
        ip = other3.ip;
        port = other3.port;
        return *this;
    }
    void network_address::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "network_address(";
        out << "ip=" << to_string(ip);
        out << ", " << "port=" << to_string(port);
        out << ")";
    }


    peer_node_info::~peer_node_info() throw() {
    }


    void peer_node_info::__set_peer_node_id(const std::string& val) {
        this->peer_node_id = val;
    }

    void peer_node_info::__set_core_version(const int32_t val) {
        this->core_version = val;
    }

    void peer_node_info::__set_protocol_version(const int32_t val) {
        this->protocol_version = val;
    }

    void peer_node_info::__set_live_time_stamp(const int32_t val) {
        this->live_time_stamp = val;
    }

    void peer_node_info::__set_addr(const network_address& val) {
        this->addr = val;
    }

    void peer_node_info::__set_service_list(const std::vector<std::string> & val) {
        this->service_list = val;
        __isset.service_list = true;
    }
    std::ostream& operator<<(std::ostream& out, const peer_node_info& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t peer_node_info::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_peer_node_id = false;
        bool isset_core_version = false;
        bool isset_protocol_version = false;
        bool isset_live_time_stamp = false;
        bool isset_addr = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->peer_node_id);
                        isset_peer_node_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_I32) {
                            xfer += iprot->readI32(this->core_version);
                            isset_core_version = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_I32) {
                                xfer += iprot->readI32(this->protocol_version);
                                isset_protocol_version = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_I32) {
                                    xfer += iprot->readI32(this->live_time_stamp);
                                    isset_live_time_stamp = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                case 5:
                                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                                        xfer += this->addr.read(iprot);
                                        isset_addr = true;
                                    } else {
                                        xfer += iprot->skip(ftype);
                                    }
                                    break;
                                    case 6:
                                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                                            {
                                                this->service_list.clear();
                                                uint32_t _size4;
                                                ::apache::thrift::protocol::TType _etype7;
                                                xfer += iprot->readListBegin(_etype7, _size4);
                                                this->service_list.resize(_size4);
                                                uint32_t _i8;
                                                for (_i8 = 0; _i8 < _size4; ++_i8)
                                                {
                                                    xfer += iprot->readString(this->service_list[_i8]);
                                                }
                                                xfer += iprot->readListEnd();
                                            }
                                            this->__isset.service_list = true;
                                        } else {
                                            xfer += iprot->skip(ftype);
                                        }
                                        break;
                                        default:
                                            xfer += iprot->skip(ftype);
                                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_peer_node_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_core_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_protocol_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_live_time_stamp)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_addr)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t peer_node_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("peer_node_info");

        xfer += oprot->writeFieldBegin("peer_node_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->peer_node_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("core_version", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->core_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("protocol_version", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->protocol_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("live_time_stamp", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32(this->live_time_stamp);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 5);
        xfer += this->addr.write(oprot);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.service_list) {
            xfer += oprot->writeFieldBegin("service_list", ::apache::thrift::protocol::T_LIST, 6);
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->service_list.size()));
                std::vector<std::string> ::const_iterator _iter9;
                for (_iter9 = this->service_list.begin(); _iter9 != this->service_list.end(); ++_iter9)
                {
                    xfer += oprot->writeString((*_iter9));
                }
                xfer += oprot->writeListEnd();
            }
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(peer_node_info &a, peer_node_info &b) {
        using ::std::swap;
        swap(a.peer_node_id, b.peer_node_id);
        swap(a.core_version, b.core_version);
        swap(a.protocol_version, b.protocol_version);
        swap(a.live_time_stamp, b.live_time_stamp);
        swap(a.addr, b.addr);
        swap(a.service_list, b.service_list);
        swap(a.__isset, b.__isset);
    }

    peer_node_info::peer_node_info(const peer_node_info& other10) {
        peer_node_id = other10.peer_node_id;
        core_version = other10.core_version;
        protocol_version = other10.protocol_version;
        live_time_stamp = other10.live_time_stamp;
        addr = other10.addr;
        service_list = other10.service_list;
        __isset = other10.__isset;
    }
    peer_node_info& peer_node_info::operator=(const peer_node_info& other11) {
        peer_node_id = other11.peer_node_id;
        core_version = other11.core_version;
        protocol_version = other11.protocol_version;
        live_time_stamp = other11.live_time_stamp;
        addr = other11.addr;
        service_list = other11.service_list;
        __isset = other11.__isset;
        return *this;
    }
    void peer_node_info::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "peer_node_info(";
        out << "peer_node_id=" << to_string(peer_node_id);
        out << ", " << "core_version=" << to_string(core_version);
        out << ", " << "protocol_version=" << to_string(protocol_version);
        out << ", " << "live_time_stamp=" << to_string(live_time_stamp);
        out << ", " << "addr=" << to_string(addr);
        out << ", " << "service_list="; (__isset.service_list ? (out << to_string(service_list)) : (out << "<null>"));
        out << ")";
    }


    shake_hand_req::~shake_hand_req() throw() {
    }


    void shake_hand_req::__set_body(const empty& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const shake_hand_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t shake_hand_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t shake_hand_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("shake_hand_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(shake_hand_req &a, shake_hand_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    shake_hand_req::shake_hand_req(const shake_hand_req& other12) {
        body = other12.body;
        __isset = other12.__isset;
    }
    shake_hand_req& shake_hand_req::operator=(const shake_hand_req& other13) {
        body = other13.body;
        __isset = other13.__isset;
        return *this;
    }
    void shake_hand_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "shake_hand_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    shake_hand_resp::~shake_hand_resp() throw() {
    }


    void shake_hand_resp::__set_body(const empty& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const shake_hand_resp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t shake_hand_resp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t shake_hand_resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("shake_hand_resp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(shake_hand_resp &a, shake_hand_resp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    shake_hand_resp::shake_hand_resp(const shake_hand_resp& other14) {
        body = other14.body;
        __isset = other14.__isset;
    }
    shake_hand_resp& shake_hand_resp::operator=(const shake_hand_resp& other15) {
        body = other15.body;
        __isset = other15.__isset;
        return *this;
    }
    void shake_hand_resp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "shake_hand_resp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    get_peer_nodes_req::~get_peer_nodes_req() throw() {
    }


    void get_peer_nodes_req::__set_body(const empty& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const get_peer_nodes_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t get_peer_nodes_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t get_peer_nodes_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("get_peer_nodes_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(get_peer_nodes_req &a, get_peer_nodes_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    get_peer_nodes_req::get_peer_nodes_req(const get_peer_nodes_req& other16) {
        body = other16.body;
        __isset = other16.__isset;
    }
    get_peer_nodes_req& get_peer_nodes_req::operator=(const get_peer_nodes_req& other17) {
        body = other17.body;
        __isset = other17.__isset;
        return *this;
    }
    void get_peer_nodes_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "get_peer_nodes_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    get_peer_nodes_resp_body::~get_peer_nodes_resp_body() throw() {
    }


    void get_peer_nodes_resp_body::__set_peer_nodes_list(const std::vector<peer_node_info> & val) {
        this->peer_nodes_list = val;
    }
    std::ostream& operator<<(std::ostream& out, const get_peer_nodes_resp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t get_peer_nodes_resp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_peer_nodes_list = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->peer_nodes_list.clear();
                            uint32_t _size18;
                            ::apache::thrift::protocol::TType _etype21;
                            xfer += iprot->readListBegin(_etype21, _size18);
                            this->peer_nodes_list.resize(_size18);
                            uint32_t _i22;
                            for (_i22 = 0; _i22 < _size18; ++_i22)
                            {
                                xfer += this->peer_nodes_list[_i22].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                        isset_peer_nodes_list = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t get_peer_nodes_resp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("get_peer_nodes_resp_body");

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<peer_node_info> ::const_iterator _iter23;
            for (_iter23 = this->peer_nodes_list.begin(); _iter23 != this->peer_nodes_list.end(); ++_iter23)
            {
                xfer += (*_iter23).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(get_peer_nodes_resp_body &a, get_peer_nodes_resp_body &b) {
        using ::std::swap;
        swap(a.peer_nodes_list, b.peer_nodes_list);
    }

    get_peer_nodes_resp_body::get_peer_nodes_resp_body(const get_peer_nodes_resp_body& other24) {
        peer_nodes_list = other24.peer_nodes_list;
    }
    get_peer_nodes_resp_body& get_peer_nodes_resp_body::operator=(const get_peer_nodes_resp_body& other25) {
        peer_nodes_list = other25.peer_nodes_list;
        return *this;
    }
    void get_peer_nodes_resp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "get_peer_nodes_resp_body(";
        out << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ")";
    }


    get_peer_nodes_resp::~get_peer_nodes_resp() throw() {
    }


    void get_peer_nodes_resp::__set_body(const get_peer_nodes_resp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const get_peer_nodes_resp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t get_peer_nodes_resp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t get_peer_nodes_resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("get_peer_nodes_resp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(get_peer_nodes_resp &a, get_peer_nodes_resp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    get_peer_nodes_resp::get_peer_nodes_resp(const get_peer_nodes_resp& other26) {
        body = other26.body;
        __isset = other26.__isset;
    }
    get_peer_nodes_resp& get_peer_nodes_resp::operator=(const get_peer_nodes_resp& other27) {
        body = other27.body;
        __isset = other27.__isset;
        return *this;
    }
    void get_peer_nodes_resp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "get_peer_nodes_resp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    peer_nodes_broadcast_req_body::~peer_nodes_broadcast_req_body() throw() {
    }


    void peer_nodes_broadcast_req_body::__set_peer_nodes_list(const std::vector<peer_node_info> & val) {
        this->peer_nodes_list = val;
    }
    std::ostream& operator<<(std::ostream& out, const peer_nodes_broadcast_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t peer_nodes_broadcast_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_peer_nodes_list = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->peer_nodes_list.clear();
                            uint32_t _size28;
                            ::apache::thrift::protocol::TType _etype31;
                            xfer += iprot->readListBegin(_etype31, _size28);
                            this->peer_nodes_list.resize(_size28);
                            uint32_t _i32;
                            for (_i32 = 0; _i32 < _size28; ++_i32)
                            {
                                xfer += this->peer_nodes_list[_i32].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                        isset_peer_nodes_list = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t peer_nodes_broadcast_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("peer_nodes_broadcast_req_body");

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<peer_node_info> ::const_iterator _iter33;
            for (_iter33 = this->peer_nodes_list.begin(); _iter33 != this->peer_nodes_list.end(); ++_iter33)
            {
                xfer += (*_iter33).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(peer_nodes_broadcast_req_body &a, peer_nodes_broadcast_req_body &b) {
        using ::std::swap;
        swap(a.peer_nodes_list, b.peer_nodes_list);
    }

    peer_nodes_broadcast_req_body::peer_nodes_broadcast_req_body(const peer_nodes_broadcast_req_body& other34) {
        peer_nodes_list = other34.peer_nodes_list;
    }
    peer_nodes_broadcast_req_body& peer_nodes_broadcast_req_body::operator=(const peer_nodes_broadcast_req_body& other35) {
        peer_nodes_list = other35.peer_nodes_list;
        return *this;
    }
    void peer_nodes_broadcast_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "peer_nodes_broadcast_req_body(";
        out << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ")";
    }


    peer_nodes_broadcast_req::~peer_nodes_broadcast_req() throw() {
    }


    void peer_nodes_broadcast_req::__set_body(const peer_nodes_broadcast_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const peer_nodes_broadcast_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t peer_nodes_broadcast_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t peer_nodes_broadcast_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("peer_nodes_broadcast_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(peer_nodes_broadcast_req &a, peer_nodes_broadcast_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    peer_nodes_broadcast_req::peer_nodes_broadcast_req(const peer_nodes_broadcast_req& other36) {
        body = other36.body;
        __isset = other36.__isset;
    }
    peer_nodes_broadcast_req& peer_nodes_broadcast_req::operator=(const peer_nodes_broadcast_req& other37) {
        body = other37.body;
        __isset = other37.__isset;
        return *this;
    }
    void peer_nodes_broadcast_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "peer_nodes_broadcast_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_create_task_req_data::~node_create_task_req_data() throw() {
    }


    void node_create_task_req_data::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_create_task_req_data::__set_additional(const std::string& val) {
        this->additional = val;
    }

    void node_create_task_req_data::__set_sign(const std::string& val) {
        this->sign = val;
    }

    void node_create_task_req_data::__set_nonce(const std::string& val) {
        this->nonce = val;
    }

    void node_create_task_req_data::__set_wallet(const std::string& val) {
        this->wallet = val;
    }

    void node_create_task_req_data::__set_session_id(const std::string& val) {
        this->session_id = val;
    }

    void node_create_task_req_data::__set_session_id_sign(const std::string& val) {
        this->session_id_sign = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_create_task_req_data& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_create_task_req_data::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_peer_nodes_list = false;
        bool isset_additional = false;
        bool isset_sign = false;
        bool isset_nonce = false;
        bool isset_wallet = false;
        bool isset_session_id = false;
        bool isset_session_id_sign = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->peer_nodes_list.clear();
                            uint32_t _size38;
                            ::apache::thrift::protocol::TType _etype41;
                            xfer += iprot->readListBegin(_etype41, _size38);
                            this->peer_nodes_list.resize(_size38);
                            uint32_t _i42;
                            for (_i42 = 0; _i42 < _size38; ++_i42)
                            {
                                xfer += iprot->readString(this->peer_nodes_list[_i42]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        isset_peer_nodes_list = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->additional);
                            isset_additional = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->sign);
                                isset_sign = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_STRING) {
                                    xfer += iprot->readString(this->nonce);
                                    isset_nonce = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                case 5:
                                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                                        xfer += iprot->readString(this->wallet);
                                        isset_wallet = true;
                                    } else {
                                        xfer += iprot->skip(ftype);
                                    }
                                    break;
                                    case 6:
                                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                                            xfer += iprot->readString(this->session_id);
                                            isset_session_id = true;
                                        } else {
                                            xfer += iprot->skip(ftype);
                                        }
                                        break;
                                        case 7:
                                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                                xfer += iprot->readString(this->session_id_sign);
                                                isset_session_id_sign = true;
                                            } else {
                                                xfer += iprot->skip(ftype);
                                            }
                                            break;
                                            default:
                                                xfer += iprot->skip(ftype);
                                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_sign)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_nonce)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_wallet)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_session_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_session_id_sign)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_create_task_req_data::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_create_task_req_data");

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter43;
            for (_iter43 = this->peer_nodes_list.begin(); _iter43 != this->peer_nodes_list.end(); ++_iter43)
            {
                xfer += oprot->writeString((*_iter43));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("sign", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->sign);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("nonce", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->nonce);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("wallet", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->wallet);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 6);
        xfer += oprot->writeString(this->session_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("session_id_sign", ::apache::thrift::protocol::T_STRING, 7);
        xfer += oprot->writeString(this->session_id_sign);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_create_task_req_data &a, node_create_task_req_data &b) {
        using ::std::swap;
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
        swap(a.sign, b.sign);
        swap(a.nonce, b.nonce);
        swap(a.wallet, b.wallet);
        swap(a.session_id, b.session_id);
        swap(a.session_id_sign, b.session_id_sign);
    }

    node_create_task_req_data::node_create_task_req_data(const node_create_task_req_data& other44) {
        peer_nodes_list = other44.peer_nodes_list;
        additional = other44.additional;
        sign = other44.sign;
        nonce = other44.nonce;
        wallet = other44.wallet;
        session_id = other44.session_id;
        session_id_sign = other44.session_id_sign;
    }
    node_create_task_req_data& node_create_task_req_data::operator=(const node_create_task_req_data& other45) {
        peer_nodes_list = other45.peer_nodes_list;
        additional = other45.additional;
        sign = other45.sign;
        nonce = other45.nonce;
        wallet = other45.wallet;
        session_id = other45.session_id;
        session_id_sign = other45.session_id_sign;
        return *this;
    }
    void node_create_task_req_data::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_create_task_req_data(";
        out << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ", " << "sign=" << to_string(sign);
        out << ", " << "nonce=" << to_string(nonce);
        out << ", " << "wallet=" << to_string(wallet);
        out << ", " << "session_id=" << to_string(session_id);
        out << ", " << "session_id_sign=" << to_string(session_id_sign);
        out << ")";
    }


    node_create_task_req_body::~node_create_task_req_body() throw() {
    }


    void node_create_task_req_body::__set_data(const std::string& val) {
        this->data = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_create_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_create_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_data = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->data);
                        isset_data = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_data)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_create_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_create_task_req_body");

        xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->data);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_create_task_req_body &a, node_create_task_req_body &b) {
        using ::std::swap;
        swap(a.data, b.data);
    }

    node_create_task_req_body::node_create_task_req_body(const node_create_task_req_body& other46) {
        data = other46.data;
    }
    node_create_task_req_body& node_create_task_req_body::operator=(const node_create_task_req_body& other47) {
        data = other47.data;
        return *this;
    }
    void node_create_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_create_task_req_body(";
        out << "data=" << to_string(data);
        out << ")";
    }


    node_create_task_req::~node_create_task_req() throw() {
    }


    void node_create_task_req::__set_body(const node_create_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_create_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_create_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_create_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_create_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_create_task_req &a, node_create_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_create_task_req::node_create_task_req(const node_create_task_req& other48) {
        body = other48.body;
        __isset = other48.__isset;
    }
    node_create_task_req& node_create_task_req::operator=(const node_create_task_req& other49) {
        body = other49.body;
        __isset = other49.__isset;
        return *this;
    }
    void node_create_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_create_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_create_task_rsp_body::~node_create_task_rsp_body() throw() {
    }


    void node_create_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_create_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_create_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_create_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_create_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_create_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_create_task_rsp_body &a, node_create_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_create_task_rsp_body::node_create_task_rsp_body(const node_create_task_rsp_body& other50) {
        result = other50.result;
        result_msg = other50.result_msg;
    }
    node_create_task_rsp_body& node_create_task_rsp_body::operator=(const node_create_task_rsp_body& other51) {
        result = other51.result;
        result_msg = other51.result_msg;
        return *this;
    }
    void node_create_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_create_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_create_task_rsp::~node_create_task_rsp() throw() {
    }


    void node_create_task_rsp::__set_body(const node_create_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_create_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_create_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_create_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_create_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_create_task_rsp &a, node_create_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_create_task_rsp::node_create_task_rsp(const node_create_task_rsp& other52) {
        body = other52.body;
        __isset = other52.__isset;
    }
    node_create_task_rsp& node_create_task_rsp::operator=(const node_create_task_rsp& other53) {
        body = other53.body;
        __isset = other53.__isset;
        return *this;
    }
    void node_create_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_create_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_start_task_req_body::~node_start_task_req_body() throw() {
    }


    void node_start_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_start_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_start_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_start_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_start_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size54;
                                ::apache::thrift::protocol::TType _etype57;
                                xfer += iprot->readListBegin(_etype57, _size54);
                                this->peer_nodes_list.resize(_size54);
                                uint32_t _i58;
                                for (_i58 = 0; _i58 < _size54; ++_i58)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i58]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_start_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_start_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter59;
            for (_iter59 = this->peer_nodes_list.begin(); _iter59 != this->peer_nodes_list.end(); ++_iter59)
            {
                xfer += oprot->writeString((*_iter59));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_start_task_req_body &a, node_start_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_start_task_req_body::node_start_task_req_body(const node_start_task_req_body& other60) {
        task_id = other60.task_id;
        peer_nodes_list = other60.peer_nodes_list;
        additional = other60.additional;
    }
    node_start_task_req_body& node_start_task_req_body::operator=(const node_start_task_req_body& other61) {
        task_id = other61.task_id;
        peer_nodes_list = other61.peer_nodes_list;
        additional = other61.additional;
        return *this;
    }
    void node_start_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_start_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_start_task_req::~node_start_task_req() throw() {
    }


    void node_start_task_req::__set_body(const node_start_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_start_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_start_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_start_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_start_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_start_task_req &a, node_start_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_start_task_req::node_start_task_req(const node_start_task_req& other62) {
        body = other62.body;
        __isset = other62.__isset;
    }
    node_start_task_req& node_start_task_req::operator=(const node_start_task_req& other63) {
        body = other63.body;
        __isset = other63.__isset;
        return *this;
    }
    void node_start_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_start_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_start_task_rsp_body::~node_start_task_rsp_body() throw() {
    }


    void node_start_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_start_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_start_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_start_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_start_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_start_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_start_task_rsp_body &a, node_start_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_start_task_rsp_body::node_start_task_rsp_body(const node_start_task_rsp_body& other64) {
        result = other64.result;
        result_msg = other64.result_msg;
    }
    node_start_task_rsp_body& node_start_task_rsp_body::operator=(const node_start_task_rsp_body& other65) {
        result = other65.result;
        result_msg = other65.result_msg;
        return *this;
    }
    void node_start_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_start_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_start_task_rsp::~node_start_task_rsp() throw() {
    }


    void node_start_task_rsp::__set_body(const node_start_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_start_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_start_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_start_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_start_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_start_task_rsp &a, node_start_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_start_task_rsp::node_start_task_rsp(const node_start_task_rsp& other66) {
        body = other66.body;
        __isset = other66.__isset;
    }
    node_start_task_rsp& node_start_task_rsp::operator=(const node_start_task_rsp& other67) {
        body = other67.body;
        __isset = other67.__isset;
        return *this;
    }
    void node_start_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_start_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_stop_task_req_body::~node_stop_task_req_body() throw() {
    }


    void node_stop_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_stop_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_stop_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_stop_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_stop_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size68;
                                ::apache::thrift::protocol::TType _etype71;
                                xfer += iprot->readListBegin(_etype71, _size68);
                                this->peer_nodes_list.resize(_size68);
                                uint32_t _i72;
                                for (_i72 = 0; _i72 < _size68; ++_i72)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i72]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_stop_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_stop_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter73;
            for (_iter73 = this->peer_nodes_list.begin(); _iter73 != this->peer_nodes_list.end(); ++_iter73)
            {
                xfer += oprot->writeString((*_iter73));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_stop_task_req_body &a, node_stop_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_stop_task_req_body::node_stop_task_req_body(const node_stop_task_req_body& other74) {
        task_id = other74.task_id;
        peer_nodes_list = other74.peer_nodes_list;
        additional = other74.additional;
    }
    node_stop_task_req_body& node_stop_task_req_body::operator=(const node_stop_task_req_body& other75) {
        task_id = other75.task_id;
        peer_nodes_list = other75.peer_nodes_list;
        additional = other75.additional;
        return *this;
    }
    void node_stop_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_stop_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_stop_task_req::~node_stop_task_req() throw() {
    }


    void node_stop_task_req::__set_body(const node_stop_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_stop_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_stop_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_stop_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_stop_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_stop_task_req &a, node_stop_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_stop_task_req::node_stop_task_req(const node_stop_task_req& other76) {
        body = other76.body;
        __isset = other76.__isset;
    }
    node_stop_task_req& node_stop_task_req::operator=(const node_stop_task_req& other77) {
        body = other77.body;
        __isset = other77.__isset;
        return *this;
    }
    void node_stop_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_stop_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_stop_task_rsp_body::~node_stop_task_rsp_body() throw() {
    }


    void node_stop_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_stop_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_stop_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_stop_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_stop_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_stop_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_stop_task_rsp_body &a, node_stop_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_stop_task_rsp_body::node_stop_task_rsp_body(const node_stop_task_rsp_body& other78) {
        result = other78.result;
        result_msg = other78.result_msg;
    }
    node_stop_task_rsp_body& node_stop_task_rsp_body::operator=(const node_stop_task_rsp_body& other79) {
        result = other79.result;
        result_msg = other79.result_msg;
        return *this;
    }
    void node_stop_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_stop_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_stop_task_rsp::~node_stop_task_rsp() throw() {
    }


    void node_stop_task_rsp::__set_body(const node_stop_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_stop_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_stop_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_stop_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_stop_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_stop_task_rsp &a, node_stop_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_stop_task_rsp::node_stop_task_rsp(const node_stop_task_rsp& other80) {
        body = other80.body;
        __isset = other80.__isset;
    }
    node_stop_task_rsp& node_stop_task_rsp::operator=(const node_stop_task_rsp& other81) {
        body = other81.body;
        __isset = other81.__isset;
        return *this;
    }
    void node_stop_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_stop_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_restart_task_req_body::~node_restart_task_req_body() throw() {
    }


    void node_restart_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_restart_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_restart_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_restart_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_restart_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size82;
                                ::apache::thrift::protocol::TType _etype85;
                                xfer += iprot->readListBegin(_etype85, _size82);
                                this->peer_nodes_list.resize(_size82);
                                uint32_t _i86;
                                for (_i86 = 0; _i86 < _size82; ++_i86)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i86]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_restart_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_restart_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter87;
            for (_iter87 = this->peer_nodes_list.begin(); _iter87 != this->peer_nodes_list.end(); ++_iter87)
            {
                xfer += oprot->writeString((*_iter87));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_restart_task_req_body &a, node_restart_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_restart_task_req_body::node_restart_task_req_body(const node_restart_task_req_body& other88) {
        task_id = other88.task_id;
        peer_nodes_list = other88.peer_nodes_list;
        additional = other88.additional;
    }
    node_restart_task_req_body& node_restart_task_req_body::operator=(const node_restart_task_req_body& other89) {
        task_id = other89.task_id;
        peer_nodes_list = other89.peer_nodes_list;
        additional = other89.additional;
        return *this;
    }
    void node_restart_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_restart_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_restart_task_req::~node_restart_task_req() throw() {
    }


    void node_restart_task_req::__set_body(const node_restart_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_restart_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_restart_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_restart_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_restart_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_restart_task_req &a, node_restart_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_restart_task_req::node_restart_task_req(const node_restart_task_req& other90) {
        body = other90.body;
        __isset = other90.__isset;
    }
    node_restart_task_req& node_restart_task_req::operator=(const node_restart_task_req& other91) {
        body = other91.body;
        __isset = other91.__isset;
        return *this;
    }
    void node_restart_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_restart_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_restart_task_rsp_body::~node_restart_task_rsp_body() throw() {
    }


    void node_restart_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_restart_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_restart_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_restart_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_restart_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_restart_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_restart_task_rsp_body &a, node_restart_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_restart_task_rsp_body::node_restart_task_rsp_body(const node_restart_task_rsp_body& other92) {
        result = other92.result;
        result_msg = other92.result_msg;
    }
    node_restart_task_rsp_body& node_restart_task_rsp_body::operator=(const node_restart_task_rsp_body& other93) {
        result = other93.result;
        result_msg = other93.result_msg;
        return *this;
    }
    void node_restart_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_restart_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_restart_task_rsp::~node_restart_task_rsp() throw() {
    }


    void node_restart_task_rsp::__set_body(const node_restart_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_restart_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_restart_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_restart_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_restart_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_restart_task_rsp &a, node_restart_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_restart_task_rsp::node_restart_task_rsp(const node_restart_task_rsp& other94) {
        body = other94.body;
        __isset = other94.__isset;
    }
    node_restart_task_rsp& node_restart_task_rsp::operator=(const node_restart_task_rsp& other95) {
        body = other95.body;
        __isset = other95.__isset;
        return *this;
    }
    void node_restart_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_restart_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_reset_task_req_body::~node_reset_task_req_body() throw() {
    }


    void node_reset_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_reset_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_reset_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_reset_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_reset_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size96;
                                ::apache::thrift::protocol::TType _etype99;
                                xfer += iprot->readListBegin(_etype99, _size96);
                                this->peer_nodes_list.resize(_size96);
                                uint32_t _i100;
                                for (_i100 = 0; _i100 < _size96; ++_i100)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i100]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_reset_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_reset_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter101;
            for (_iter101 = this->peer_nodes_list.begin(); _iter101 != this->peer_nodes_list.end(); ++_iter101)
            {
                xfer += oprot->writeString((*_iter101));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_reset_task_req_body &a, node_reset_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_reset_task_req_body::node_reset_task_req_body(const node_reset_task_req_body& other102) {
        task_id = other102.task_id;
        peer_nodes_list = other102.peer_nodes_list;
        additional = other102.additional;
    }
    node_reset_task_req_body& node_reset_task_req_body::operator=(const node_reset_task_req_body& other103) {
        task_id = other103.task_id;
        peer_nodes_list = other103.peer_nodes_list;
        additional = other103.additional;
        return *this;
    }
    void node_reset_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_reset_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_reset_task_req::~node_reset_task_req() throw() {
    }


    void node_reset_task_req::__set_body(const node_reset_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_reset_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_reset_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_reset_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_reset_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_reset_task_req &a, node_reset_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_reset_task_req::node_reset_task_req(const node_reset_task_req& other104) {
        body = other104.body;
        __isset = other104.__isset;
    }
    node_reset_task_req& node_reset_task_req::operator=(const node_reset_task_req& other105) {
        body = other105.body;
        __isset = other105.__isset;
        return *this;
    }
    void node_reset_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_reset_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_reset_task_rsp_body::~node_reset_task_rsp_body() throw() {
    }


    void node_reset_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_reset_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_reset_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_reset_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_reset_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_reset_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_reset_task_rsp_body &a, node_reset_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_reset_task_rsp_body::node_reset_task_rsp_body(const node_reset_task_rsp_body& other106) {
        result = other106.result;
        result_msg = other106.result_msg;
    }
    node_reset_task_rsp_body& node_reset_task_rsp_body::operator=(const node_reset_task_rsp_body& other107) {
        result = other107.result;
        result_msg = other107.result_msg;
        return *this;
    }
    void node_reset_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_reset_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_reset_task_rsp::~node_reset_task_rsp() throw() {
    }


    void node_reset_task_rsp::__set_body(const node_reset_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_reset_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_reset_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_reset_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_reset_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_reset_task_rsp &a, node_reset_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_reset_task_rsp::node_reset_task_rsp(const node_reset_task_rsp& other108) {
        body = other108.body;
        __isset = other108.__isset;
    }
    node_reset_task_rsp& node_reset_task_rsp::operator=(const node_reset_task_rsp& other109) {
        body = other109.body;
        __isset = other109.__isset;
        return *this;
    }
    void node_reset_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_reset_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_delete_task_req_body::~node_delete_task_req_body() throw() {
    }


    void node_delete_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_delete_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_delete_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_delete_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_delete_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size110;
                                ::apache::thrift::protocol::TType _etype113;
                                xfer += iprot->readListBegin(_etype113, _size110);
                                this->peer_nodes_list.resize(_size110);
                                uint32_t _i114;
                                for (_i114 = 0; _i114 < _size110; ++_i114)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i114]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_delete_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_delete_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter115;
            for (_iter115 = this->peer_nodes_list.begin(); _iter115 != this->peer_nodes_list.end(); ++_iter115)
            {
                xfer += oprot->writeString((*_iter115));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_delete_task_req_body &a, node_delete_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_delete_task_req_body::node_delete_task_req_body(const node_delete_task_req_body& other116) {
        task_id = other116.task_id;
        peer_nodes_list = other116.peer_nodes_list;
        additional = other116.additional;
    }
    node_delete_task_req_body& node_delete_task_req_body::operator=(const node_delete_task_req_body& other117) {
        task_id = other117.task_id;
        peer_nodes_list = other117.peer_nodes_list;
        additional = other117.additional;
        return *this;
    }
    void node_delete_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_delete_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_delete_task_req::~node_delete_task_req() throw() {
    }


    void node_delete_task_req::__set_body(const node_delete_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_delete_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_delete_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_delete_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_delete_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_delete_task_req &a, node_delete_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_delete_task_req::node_delete_task_req(const node_delete_task_req& other118) {
        body = other118.body;
        __isset = other118.__isset;
    }
    node_delete_task_req& node_delete_task_req::operator=(const node_delete_task_req& other119) {
        body = other119.body;
        __isset = other119.__isset;
        return *this;
    }
    void node_delete_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_delete_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_delete_task_rsp_body::~node_delete_task_rsp_body() throw() {
    }


    void node_delete_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_delete_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_delete_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_delete_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_delete_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_delete_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_delete_task_rsp_body &a, node_delete_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_delete_task_rsp_body::node_delete_task_rsp_body(const node_delete_task_rsp_body& other120) {
        result = other120.result;
        result_msg = other120.result_msg;
    }
    node_delete_task_rsp_body& node_delete_task_rsp_body::operator=(const node_delete_task_rsp_body& other121) {
        result = other121.result;
        result_msg = other121.result_msg;
        return *this;
    }
    void node_delete_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_delete_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_delete_task_rsp::~node_delete_task_rsp() throw() {
    }


    void node_delete_task_rsp::__set_body(const node_delete_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_delete_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_delete_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_delete_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_delete_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_delete_task_rsp &a, node_delete_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_delete_task_rsp::node_delete_task_rsp(const node_delete_task_rsp& other122) {
        body = other122.body;
        __isset = other122.__isset;
    }
    node_delete_task_rsp& node_delete_task_rsp::operator=(const node_delete_task_rsp& other123) {
        body = other123.body;
        __isset = other123.__isset;
        return *this;
    }
    void node_delete_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_delete_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_task_logs_req_body::~node_task_logs_req_body() throw() {
    }


    void node_task_logs_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_task_logs_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_task_logs_req_body::__set_head_or_tail(const int8_t val) {
        this->head_or_tail = val;
    }

    void node_task_logs_req_body::__set_number_of_lines(const int16_t val) {
        this->number_of_lines = val;
    }

    void node_task_logs_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_task_logs_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_task_logs_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_head_or_tail = false;
        bool isset_number_of_lines = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size124;
                                ::apache::thrift::protocol::TType _etype127;
                                xfer += iprot->readListBegin(_etype127, _size124);
                                this->peer_nodes_list.resize(_size124);
                                uint32_t _i128;
                                for (_i128 = 0; _i128 < _size124; ++_i128)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i128]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_BYTE) {
                                xfer += iprot->readByte(this->head_or_tail);
                                isset_head_or_tail = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_I16) {
                                    xfer += iprot->readI16(this->number_of_lines);
                                    isset_number_of_lines = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                case 5:
                                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                                        xfer += iprot->readString(this->additional);
                                        isset_additional = true;
                                    } else {
                                        xfer += iprot->skip(ftype);
                                    }
                                    break;
                                    default:
                                        xfer += iprot->skip(ftype);
                                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_head_or_tail)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_number_of_lines)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_task_logs_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_task_logs_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter129;
            for (_iter129 = this->peer_nodes_list.begin(); _iter129 != this->peer_nodes_list.end(); ++_iter129)
            {
                xfer += oprot->writeString((*_iter129));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("head_or_tail", ::apache::thrift::protocol::T_BYTE, 3);
        xfer += oprot->writeByte(this->head_or_tail);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("number_of_lines", ::apache::thrift::protocol::T_I16, 4);
        xfer += oprot->writeI16(this->number_of_lines);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_task_logs_req_body &a, node_task_logs_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.head_or_tail, b.head_or_tail);
        swap(a.number_of_lines, b.number_of_lines);
        swap(a.additional, b.additional);
    }

    node_task_logs_req_body::node_task_logs_req_body(const node_task_logs_req_body& other130) {
        task_id = other130.task_id;
        peer_nodes_list = other130.peer_nodes_list;
        head_or_tail = other130.head_or_tail;
        number_of_lines = other130.number_of_lines;
        additional = other130.additional;
    }
    node_task_logs_req_body& node_task_logs_req_body::operator=(const node_task_logs_req_body& other131) {
        task_id = other131.task_id;
        peer_nodes_list = other131.peer_nodes_list;
        head_or_tail = other131.head_or_tail;
        number_of_lines = other131.number_of_lines;
        additional = other131.additional;
        return *this;
    }
    void node_task_logs_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_task_logs_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "head_or_tail=" << to_string(head_or_tail);
        out << ", " << "number_of_lines=" << to_string(number_of_lines);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_task_logs_req::~node_task_logs_req() throw() {
    }


    void node_task_logs_req::__set_body(const node_task_logs_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_task_logs_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_task_logs_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_task_logs_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_task_logs_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_task_logs_req &a, node_task_logs_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_task_logs_req::node_task_logs_req(const node_task_logs_req& other132) {
        body = other132.body;
        __isset = other132.__isset;
    }
    node_task_logs_req& node_task_logs_req::operator=(const node_task_logs_req& other133) {
        body = other133.body;
        __isset = other133.__isset;
        return *this;
    }
    void node_task_logs_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_task_logs_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_task_logs_rsp_body::~node_task_logs_rsp_body() throw() {
    }


    void node_task_logs_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_task_logs_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_task_logs_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_task_logs_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_task_logs_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_task_logs_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_task_logs_rsp_body &a, node_task_logs_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_task_logs_rsp_body::node_task_logs_rsp_body(const node_task_logs_rsp_body& other134) {
        result = other134.result;
        result_msg = other134.result_msg;
    }
    node_task_logs_rsp_body& node_task_logs_rsp_body::operator=(const node_task_logs_rsp_body& other135) {
        result = other135.result;
        result_msg = other135.result_msg;
        return *this;
    }
    void node_task_logs_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_task_logs_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_task_logs_rsp::~node_task_logs_rsp() throw() {
    }


    void node_task_logs_rsp::__set_body(const node_task_logs_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_task_logs_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_task_logs_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_task_logs_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_task_logs_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_task_logs_rsp &a, node_task_logs_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_task_logs_rsp::node_task_logs_rsp(const node_task_logs_rsp& other136) {
        body = other136.body;
        __isset = other136.__isset;
    }
    node_task_logs_rsp& node_task_logs_rsp::operator=(const node_task_logs_rsp& other137) {
        body = other137.body;
        __isset = other137.__isset;
        return *this;
    }
    void node_task_logs_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_task_logs_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_list_task_req_body::~node_list_task_req_body() throw() {
    }


    void node_list_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_list_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_list_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_list_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_list_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size138;
                                ::apache::thrift::protocol::TType _etype141;
                                xfer += iprot->readListBegin(_etype141, _size138);
                                this->peer_nodes_list.resize(_size138);
                                uint32_t _i142;
                                for (_i142 = 0; _i142 < _size138; ++_i142)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i142]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_list_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_list_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter143;
            for (_iter143 = this->peer_nodes_list.begin(); _iter143 != this->peer_nodes_list.end(); ++_iter143)
            {
                xfer += oprot->writeString((*_iter143));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_list_task_req_body &a, node_list_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_list_task_req_body::node_list_task_req_body(const node_list_task_req_body& other144) {
        task_id = other144.task_id;
        peer_nodes_list = other144.peer_nodes_list;
        additional = other144.additional;
    }
    node_list_task_req_body& node_list_task_req_body::operator=(const node_list_task_req_body& other145) {
        task_id = other145.task_id;
        peer_nodes_list = other145.peer_nodes_list;
        additional = other145.additional;
        return *this;
    }
    void node_list_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_list_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_list_task_req::~node_list_task_req() throw() {
    }


    void node_list_task_req::__set_body(const node_list_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_list_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_list_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_list_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_list_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_list_task_req &a, node_list_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_list_task_req::node_list_task_req(const node_list_task_req& other146) {
        body = other146.body;
        __isset = other146.__isset;
    }
    node_list_task_req& node_list_task_req::operator=(const node_list_task_req& other147) {
        body = other147.body;
        __isset = other147.__isset;
        return *this;
    }
    void node_list_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_list_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_list_task_rsp_body::~node_list_task_rsp_body() throw() {
    }


    void node_list_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_list_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_list_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_list_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_list_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_list_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_list_task_rsp_body &a, node_list_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_list_task_rsp_body::node_list_task_rsp_body(const node_list_task_rsp_body& other148) {
        result = other148.result;
        result_msg = other148.result_msg;
    }
    node_list_task_rsp_body& node_list_task_rsp_body::operator=(const node_list_task_rsp_body& other149) {
        result = other149.result;
        result_msg = other149.result_msg;
        return *this;
    }
    void node_list_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_list_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_list_task_rsp::~node_list_task_rsp() throw() {
    }


    void node_list_task_rsp::__set_body(const node_list_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_list_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_list_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_list_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_list_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_list_task_rsp &a, node_list_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_list_task_rsp::node_list_task_rsp(const node_list_task_rsp& other150) {
        body = other150.body;
        __isset = other150.__isset;
    }
    node_list_task_rsp& node_list_task_rsp::operator=(const node_list_task_rsp& other151) {
        body = other151.body;
        __isset = other151.__isset;
        return *this;
    }
    void node_list_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_list_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_modify_task_req_body::~node_modify_task_req_body() throw() {
    }


    void node_modify_task_req_body::__set_task_id(const std::string& val) {
        this->task_id = val;
    }

    void node_modify_task_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_modify_task_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_modify_task_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_modify_task_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_task_id = false;
        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->task_id);
                        isset_task_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_LIST) {
                            {
                                this->peer_nodes_list.clear();
                                uint32_t _size152;
                                ::apache::thrift::protocol::TType _etype155;
                                xfer += iprot->readListBegin(_etype155, _size152);
                                this->peer_nodes_list.resize(_size152);
                                uint32_t _i156;
                                for (_i156 = 0; _i156 < _size152; ++_i156)
                                {
                                    xfer += iprot->readString(this->peer_nodes_list[_i156]);
                                }
                                xfer += iprot->readListEnd();
                            }
                            isset_peer_nodes_list = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_STRING) {
                                xfer += iprot->readString(this->additional);
                                isset_additional = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_task_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_modify_task_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_modify_task_req_body");

        xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->task_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter157;
            for (_iter157 = this->peer_nodes_list.begin(); _iter157 != this->peer_nodes_list.end(); ++_iter157)
            {
                xfer += oprot->writeString((*_iter157));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_modify_task_req_body &a, node_modify_task_req_body &b) {
        using ::std::swap;
        swap(a.task_id, b.task_id);
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_modify_task_req_body::node_modify_task_req_body(const node_modify_task_req_body& other158) {
        task_id = other158.task_id;
        peer_nodes_list = other158.peer_nodes_list;
        additional = other158.additional;
    }
    node_modify_task_req_body& node_modify_task_req_body::operator=(const node_modify_task_req_body& other159) {
        task_id = other159.task_id;
        peer_nodes_list = other159.peer_nodes_list;
        additional = other159.additional;
        return *this;
    }
    void node_modify_task_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_modify_task_req_body(";
        out << "task_id=" << to_string(task_id);
        out << ", " << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_modify_task_req::~node_modify_task_req() throw() {
    }


    void node_modify_task_req::__set_body(const node_modify_task_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_modify_task_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_modify_task_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_modify_task_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_modify_task_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_modify_task_req &a, node_modify_task_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_modify_task_req::node_modify_task_req(const node_modify_task_req& other160) {
        body = other160.body;
        __isset = other160.__isset;
    }
    node_modify_task_req& node_modify_task_req::operator=(const node_modify_task_req& other161) {
        body = other161.body;
        __isset = other161.__isset;
        return *this;
    }
    void node_modify_task_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_modify_task_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_modify_task_rsp_body::~node_modify_task_rsp_body() throw() {
    }


    void node_modify_task_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_modify_task_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_modify_task_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_modify_task_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_modify_task_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_modify_task_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_modify_task_rsp_body &a, node_modify_task_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
    }

    node_modify_task_rsp_body::node_modify_task_rsp_body(const node_modify_task_rsp_body& other162) {
        result = other162.result;
        result_msg = other162.result_msg;
    }
    node_modify_task_rsp_body& node_modify_task_rsp_body::operator=(const node_modify_task_rsp_body& other163) {
        result = other163.result;
        result_msg = other163.result_msg;
        return *this;
    }
    void node_modify_task_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_modify_task_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ")";
    }


    node_modify_task_rsp::~node_modify_task_rsp() throw() {
    }


    void node_modify_task_rsp::__set_body(const node_modify_task_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_modify_task_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_modify_task_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_modify_task_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_modify_task_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_modify_task_rsp &a, node_modify_task_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_modify_task_rsp::node_modify_task_rsp(const node_modify_task_rsp& other164) {
        body = other164.body;
        __isset = other164.__isset;
    }
    node_modify_task_rsp& node_modify_task_rsp::operator=(const node_modify_task_rsp& other165) {
        body = other165.body;
        __isset = other165.__isset;
        return *this;
    }
    void node_modify_task_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_modify_task_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    ver_req_body::~ver_req_body() throw() {
    }


    void ver_req_body::__set_node_id(const std::string& val) {
        this->node_id = val;
    }

    void ver_req_body::__set_core_version(const int32_t val) {
        this->core_version = val;
    }

    void ver_req_body::__set_protocol_version(const int32_t val) {
        this->protocol_version = val;
    }

    void ver_req_body::__set_time_stamp(const int64_t val) {
        this->time_stamp = val;
    }

    void ver_req_body::__set_addr_me(const network_address& val) {
        this->addr_me = val;
    }

    void ver_req_body::__set_addr_you(const network_address& val) {
        this->addr_you = val;
    }

    void ver_req_body::__set_start_height(const int64_t val) {
        this->start_height = val;
    }
    std::ostream& operator<<(std::ostream& out, const ver_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t ver_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_node_id = false;
        bool isset_core_version = false;
        bool isset_protocol_version = false;
        bool isset_time_stamp = false;
        bool isset_addr_me = false;
        bool isset_addr_you = false;
        bool isset_start_height = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->node_id);
                        isset_node_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_I32) {
                            xfer += iprot->readI32(this->core_version);
                            isset_core_version = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_I32) {
                                xfer += iprot->readI32(this->protocol_version);
                                isset_protocol_version = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_I64) {
                                    xfer += iprot->readI64(this->time_stamp);
                                    isset_time_stamp = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                case 5:
                                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                                        xfer += this->addr_me.read(iprot);
                                        isset_addr_me = true;
                                    } else {
                                        xfer += iprot->skip(ftype);
                                    }
                                    break;
                                    case 6:
                                        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                                            xfer += this->addr_you.read(iprot);
                                            isset_addr_you = true;
                                        } else {
                                            xfer += iprot->skip(ftype);
                                        }
                                        break;
                                        case 7:
                                            if (ftype == ::apache::thrift::protocol::T_I64) {
                                                xfer += iprot->readI64(this->start_height);
                                                isset_start_height = true;
                                            } else {
                                                xfer += iprot->skip(ftype);
                                            }
                                            break;
                                            default:
                                                xfer += iprot->skip(ftype);
                                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_node_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_core_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_protocol_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_time_stamp)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_addr_me)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_addr_you)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_start_height)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t ver_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("ver_req_body");

        xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->node_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("core_version", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->core_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("protocol_version", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->protocol_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->time_stamp);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("addr_me", ::apache::thrift::protocol::T_STRUCT, 5);
        xfer += this->addr_me.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("addr_you", ::apache::thrift::protocol::T_STRUCT, 6);
        xfer += this->addr_you.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("start_height", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->start_height);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ver_req_body &a, ver_req_body &b) {
        using ::std::swap;
        swap(a.node_id, b.node_id);
        swap(a.core_version, b.core_version);
        swap(a.protocol_version, b.protocol_version);
        swap(a.time_stamp, b.time_stamp);
        swap(a.addr_me, b.addr_me);
        swap(a.addr_you, b.addr_you);
        swap(a.start_height, b.start_height);
    }

    ver_req_body::ver_req_body(const ver_req_body& other166) {
        node_id = other166.node_id;
        core_version = other166.core_version;
        protocol_version = other166.protocol_version;
        time_stamp = other166.time_stamp;
        addr_me = other166.addr_me;
        addr_you = other166.addr_you;
        start_height = other166.start_height;
    }
    ver_req_body& ver_req_body::operator=(const ver_req_body& other167) {
        node_id = other167.node_id;
        core_version = other167.core_version;
        protocol_version = other167.protocol_version;
        time_stamp = other167.time_stamp;
        addr_me = other167.addr_me;
        addr_you = other167.addr_you;
        start_height = other167.start_height;
        return *this;
    }
    void ver_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "ver_req_body(";
        out << "node_id=" << to_string(node_id);
        out << ", " << "core_version=" << to_string(core_version);
        out << ", " << "protocol_version=" << to_string(protocol_version);
        out << ", " << "time_stamp=" << to_string(time_stamp);
        out << ", " << "addr_me=" << to_string(addr_me);
        out << ", " << "addr_you=" << to_string(addr_you);
        out << ", " << "start_height=" << to_string(start_height);
        out << ")";
    }


    ver_req::~ver_req() throw() {
    }


    void ver_req::__set_body(const ver_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const ver_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t ver_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t ver_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("ver_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ver_req &a, ver_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    ver_req::ver_req(const ver_req& other168) {
        body = other168.body;
        __isset = other168.__isset;
    }
    ver_req& ver_req::operator=(const ver_req& other169) {
        body = other169.body;
        __isset = other169.__isset;
        return *this;
    }
    void ver_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "ver_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    ver_resp_body::~ver_resp_body() throw() {
    }


    void ver_resp_body::__set_node_id(const std::string& val) {
        this->node_id = val;
    }

    void ver_resp_body::__set_core_version(const int32_t val) {
        this->core_version = val;
    }

    void ver_resp_body::__set_protocol_version(const int32_t val) {
        this->protocol_version = val;
    }
    std::ostream& operator<<(std::ostream& out, const ver_resp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t ver_resp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_node_id = false;
        bool isset_core_version = false;
        bool isset_protocol_version = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->node_id);
                        isset_node_id = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_I32) {
                            xfer += iprot->readI32(this->core_version);
                            isset_core_version = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_I32) {
                                xfer += iprot->readI32(this->protocol_version);
                                isset_protocol_version = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_node_id)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_core_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_protocol_version)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t ver_resp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("ver_resp_body");

        xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->node_id);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("core_version", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->core_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("protocol_version", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->protocol_version);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ver_resp_body &a, ver_resp_body &b) {
        using ::std::swap;
        swap(a.node_id, b.node_id);
        swap(a.core_version, b.core_version);
        swap(a.protocol_version, b.protocol_version);
    }

    ver_resp_body::ver_resp_body(const ver_resp_body& other170) {
        node_id = other170.node_id;
        core_version = other170.core_version;
        protocol_version = other170.protocol_version;
    }
    ver_resp_body& ver_resp_body::operator=(const ver_resp_body& other171) {
        node_id = other171.node_id;
        core_version = other171.core_version;
        protocol_version = other171.protocol_version;
        return *this;
    }
    void ver_resp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "ver_resp_body(";
        out << "node_id=" << to_string(node_id);
        out << ", " << "core_version=" << to_string(core_version);
        out << ", " << "protocol_version=" << to_string(protocol_version);
        out << ")";
    }


    ver_resp::~ver_resp() throw() {
    }


    void ver_resp::__set_body(const ver_resp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const ver_resp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t ver_resp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t ver_resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("ver_resp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ver_resp &a, ver_resp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    ver_resp::ver_resp(const ver_resp& other172) {
        body = other172.body;
        __isset = other172.__isset;
    }
    ver_resp& ver_resp::operator=(const ver_resp& other173) {
        body = other173.body;
        __isset = other173.__isset;
        return *this;
    }
    void ver_resp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "ver_resp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_service_info::~node_service_info() throw() {
    }


    void node_service_info::__set_service_list(const std::vector<std::string> & val) {
        this->service_list = val;
    }

    void node_service_info::__set_name(const std::string& val) {
        this->name = val;
        __isset.name = true;
    }

    void node_service_info::__set_time_stamp(const int64_t val) {
        this->time_stamp = val;
        __isset.time_stamp = true;
    }

    void node_service_info::__set_kvs(const std::map<std::string, std::string> & val) {
        this->kvs = val;
        __isset.kvs = true;
    }
    std::ostream& operator<<(std::ostream& out, const node_service_info& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_service_info::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_service_list = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->service_list.clear();
                            uint32_t _size174;
                            ::apache::thrift::protocol::TType _etype177;
                            xfer += iprot->readListBegin(_etype177, _size174);
                            this->service_list.resize(_size174);
                            uint32_t _i178;
                            for (_i178 = 0; _i178 < _size174; ++_i178)
                            {
                                xfer += iprot->readString(this->service_list[_i178]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        isset_service_list = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->name);
                            this->__isset.name = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_I64) {
                                xfer += iprot->readI64(this->time_stamp);
                                this->__isset.time_stamp = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            case 4:
                                if (ftype == ::apache::thrift::protocol::T_MAP) {
                                    {
                                        this->kvs.clear();
                                        uint32_t _size179;
                                        ::apache::thrift::protocol::TType _ktype180;
                                        ::apache::thrift::protocol::TType _vtype181;
                                        xfer += iprot->readMapBegin(_ktype180, _vtype181, _size179);
                                        uint32_t _i183;
                                        for (_i183 = 0; _i183 < _size179; ++_i183)
                                        {
                                            std::string _key184;
                                            xfer += iprot->readString(_key184);
                                            std::string& _val185 = this->kvs[_key184];
                                            xfer += iprot->readString(_val185);
                                        }
                                        xfer += iprot->readMapEnd();
                                    }
                                    this->__isset.kvs = true;
                                } else {
                                    xfer += iprot->skip(ftype);
                                }
                                break;
                                default:
                                    xfer += iprot->skip(ftype);
                                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_service_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_service_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_service_info");

        xfer += oprot->writeFieldBegin("service_list", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->service_list.size()));
            std::vector<std::string> ::const_iterator _iter186;
            for (_iter186 = this->service_list.begin(); _iter186 != this->service_list.end(); ++_iter186)
            {
                xfer += oprot->writeString((*_iter186));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        if (this->__isset.name) {
            xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
            xfer += oprot->writeString(this->name);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.time_stamp) {
            xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 3);
            xfer += oprot->writeI64(this->time_stamp);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.kvs) {
            xfer += oprot->writeFieldBegin("kvs", ::apache::thrift::protocol::T_MAP, 4);
            {
                xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->kvs.size()));
                std::map<std::string, std::string> ::const_iterator _iter187;
                for (_iter187 = this->kvs.begin(); _iter187 != this->kvs.end(); ++_iter187)
                {
                    xfer += oprot->writeString(_iter187->first);
                    xfer += oprot->writeString(_iter187->second);
                }
                xfer += oprot->writeMapEnd();
            }
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_service_info &a, node_service_info &b) {
        using ::std::swap;
        swap(a.service_list, b.service_list);
        swap(a.name, b.name);
        swap(a.time_stamp, b.time_stamp);
        swap(a.kvs, b.kvs);
        swap(a.__isset, b.__isset);
    }

    node_service_info::node_service_info(const node_service_info& other188) {
        service_list = other188.service_list;
        name = other188.name;
        time_stamp = other188.time_stamp;
        kvs = other188.kvs;
        __isset = other188.__isset;
    }
    node_service_info& node_service_info::operator=(const node_service_info& other189) {
        service_list = other189.service_list;
        name = other189.name;
        time_stamp = other189.time_stamp;
        kvs = other189.kvs;
        __isset = other189.__isset;
        return *this;
    }
    void node_service_info::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_service_info(";
        out << "service_list=" << to_string(service_list);
        out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
        out << ", " << "time_stamp="; (__isset.time_stamp ? (out << to_string(time_stamp)) : (out << "<null>"));
        out << ", " << "kvs="; (__isset.kvs ? (out << to_string(kvs)) : (out << "<null>"));
        out << ")";
    }


    node_query_node_info_req_body::~node_query_node_info_req_body() throw() {
    }


    void node_query_node_info_req_body::__set_peer_nodes_list(const std::vector<std::string> & val) {
        this->peer_nodes_list = val;
    }

    void node_query_node_info_req_body::__set_additional(const std::string& val) {
        this->additional = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_query_node_info_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_query_node_info_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_peer_nodes_list = false;
        bool isset_additional = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->peer_nodes_list.clear();
                            uint32_t _size190;
                            ::apache::thrift::protocol::TType _etype193;
                            xfer += iprot->readListBegin(_etype193, _size190);
                            this->peer_nodes_list.resize(_size190);
                            uint32_t _i194;
                            for (_i194 = 0; _i194 < _size190; ++_i194)
                            {
                                xfer += iprot->readString(this->peer_nodes_list[_i194]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        isset_peer_nodes_list = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->additional);
                            isset_additional = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        default:
                            xfer += iprot->skip(ftype);
                            break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_peer_nodes_list)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_additional)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_query_node_info_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_query_node_info_req_body");

        xfer += oprot->writeFieldBegin("peer_nodes_list", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->peer_nodes_list.size()));
            std::vector<std::string> ::const_iterator _iter195;
            for (_iter195 = this->peer_nodes_list.begin(); _iter195 != this->peer_nodes_list.end(); ++_iter195)
            {
                xfer += oprot->writeString((*_iter195));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("additional", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->additional);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_query_node_info_req_body &a, node_query_node_info_req_body &b) {
        using ::std::swap;
        swap(a.peer_nodes_list, b.peer_nodes_list);
        swap(a.additional, b.additional);
    }

    node_query_node_info_req_body::node_query_node_info_req_body(const node_query_node_info_req_body& other196) {
        peer_nodes_list = other196.peer_nodes_list;
        additional = other196.additional;
    }
    node_query_node_info_req_body& node_query_node_info_req_body::operator=(const node_query_node_info_req_body& other197) {
        peer_nodes_list = other197.peer_nodes_list;
        additional = other197.additional;
        return *this;
    }
    void node_query_node_info_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_query_node_info_req_body(";
        out << "peer_nodes_list=" << to_string(peer_nodes_list);
        out << ", " << "additional=" << to_string(additional);
        out << ")";
    }


    node_query_node_info_req::~node_query_node_info_req() throw() {
    }


    void node_query_node_info_req::__set_body(const node_query_node_info_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_query_node_info_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_query_node_info_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_query_node_info_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_query_node_info_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_query_node_info_req &a, node_query_node_info_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_query_node_info_req::node_query_node_info_req(const node_query_node_info_req& other198) {
        body = other198.body;
        __isset = other198.__isset;
    }
    node_query_node_info_req& node_query_node_info_req::operator=(const node_query_node_info_req& other199) {
        body = other199.body;
        __isset = other199.__isset;
        return *this;
    }
    void node_query_node_info_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_query_node_info_req(";
        out << "body=" << to_string(body);
        out << ")";
    }


    node_query_node_info_rsp_body::~node_query_node_info_rsp_body() throw() {
    }


    void node_query_node_info_rsp_body::__set_result(const int32_t val) {
        this->result = val;
    }

    void node_query_node_info_rsp_body::__set_result_msg(const std::string& val) {
        this->result_msg = val;
    }

    void node_query_node_info_rsp_body::__set_kvs(const std::map<std::string, std::string> & val) {
        this->kvs = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_query_node_info_rsp_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_query_node_info_rsp_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_result = false;
        bool isset_result_msg = false;
        bool isset_kvs = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->result);
                        isset_result = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    case 2:
                        if (ftype == ::apache::thrift::protocol::T_STRING) {
                            xfer += iprot->readString(this->result_msg);
                            isset_result_msg = true;
                        } else {
                            xfer += iprot->skip(ftype);
                        }
                        break;
                        case 3:
                            if (ftype == ::apache::thrift::protocol::T_MAP) {
                                {
                                    this->kvs.clear();
                                    uint32_t _size200;
                                    ::apache::thrift::protocol::TType _ktype201;
                                    ::apache::thrift::protocol::TType _vtype202;
                                    xfer += iprot->readMapBegin(_ktype201, _vtype202, _size200);
                                    uint32_t _i204;
                                    for (_i204 = 0; _i204 < _size200; ++_i204)
                                    {
                                        std::string _key205;
                                        xfer += iprot->readString(_key205);
                                        std::string& _val206 = this->kvs[_key205];
                                        xfer += iprot->readString(_val206);
                                    }
                                    xfer += iprot->readMapEnd();
                                }
                                isset_kvs = true;
                            } else {
                                xfer += iprot->skip(ftype);
                            }
                            break;
                            default:
                                xfer += iprot->skip(ftype);
                                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_result)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_result_msg)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_kvs)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t node_query_node_info_rsp_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_query_node_info_rsp_body");

        xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
        xfer += oprot->writeI32(this->result);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("result_msg", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->result_msg);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("kvs", ::apache::thrift::protocol::T_MAP, 3);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->kvs.size()));
            std::map<std::string, std::string> ::const_iterator _iter207;
            for (_iter207 = this->kvs.begin(); _iter207 != this->kvs.end(); ++_iter207)
            {
                xfer += oprot->writeString(_iter207->first);
                xfer += oprot->writeString(_iter207->second);
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_query_node_info_rsp_body &a, node_query_node_info_rsp_body &b) {
        using ::std::swap;
        swap(a.result, b.result);
        swap(a.result_msg, b.result_msg);
        swap(a.kvs, b.kvs);
    }

    node_query_node_info_rsp_body::node_query_node_info_rsp_body(const node_query_node_info_rsp_body& other208) {
        result = other208.result;
        result_msg = other208.result_msg;
        kvs = other208.kvs;
    }
    node_query_node_info_rsp_body& node_query_node_info_rsp_body::operator=(const node_query_node_info_rsp_body& other209) {
        result = other209.result;
        result_msg = other209.result_msg;
        kvs = other209.kvs;
        return *this;
    }
    void node_query_node_info_rsp_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_query_node_info_rsp_body(";
        out << "result=" << to_string(result);
        out << ", " << "result_msg=" << to_string(result_msg);
        out << ", " << "kvs=" << to_string(kvs);
        out << ")";
    }


    node_query_node_info_rsp::~node_query_node_info_rsp() throw() {
    }


    void node_query_node_info_rsp::__set_body(const node_query_node_info_rsp_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const node_query_node_info_rsp& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t node_query_node_info_rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t node_query_node_info_rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("node_query_node_info_rsp");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(node_query_node_info_rsp &a, node_query_node_info_rsp &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    node_query_node_info_rsp::node_query_node_info_rsp(const node_query_node_info_rsp& other210) {
        body = other210.body;
        __isset = other210.__isset;
    }
    node_query_node_info_rsp& node_query_node_info_rsp::operator=(const node_query_node_info_rsp& other211) {
        body = other211.body;
        __isset = other211.__isset;
        return *this;
    }
    void node_query_node_info_rsp::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "node_query_node_info_rsp(";
        out << "body=" << to_string(body);
        out << ")";
    }


    service_broadcast_req_body::~service_broadcast_req_body() throw() {
    }


    void service_broadcast_req_body::__set_node_service_info_map(const std::map<std::string, node_service_info> & val) {
        this->node_service_info_map = val;
    }
    std::ostream& operator<<(std::ostream& out, const service_broadcast_req_body& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t service_broadcast_req_body::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_node_service_info_map = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_MAP) {
                        {
                            this->node_service_info_map.clear();
                            uint32_t _size212;
                            ::apache::thrift::protocol::TType _ktype213;
                            ::apache::thrift::protocol::TType _vtype214;
                            xfer += iprot->readMapBegin(_ktype213, _vtype214, _size212);
                            uint32_t _i216;
                            for (_i216 = 0; _i216 < _size212; ++_i216)
                            {
                                std::string _key217;
                                xfer += iprot->readString(_key217);
                                node_service_info& _val218 = this->node_service_info_map[_key217];
                                xfer += _val218.read(iprot);
                            }
                            xfer += iprot->readMapEnd();
                        }
                        isset_node_service_info_map = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_node_service_info_map)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t service_broadcast_req_body::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("service_broadcast_req_body");

        xfer += oprot->writeFieldBegin("node_service_info_map", ::apache::thrift::protocol::T_MAP, 1);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->node_service_info_map.size()));
            std::map<std::string, node_service_info> ::const_iterator _iter219;
            for (_iter219 = this->node_service_info_map.begin(); _iter219 != this->node_service_info_map.end(); ++_iter219)
            {
                xfer += oprot->writeString(_iter219->first);
                xfer += _iter219->second.write(oprot);
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(service_broadcast_req_body &a, service_broadcast_req_body &b) {
        using ::std::swap;
        swap(a.node_service_info_map, b.node_service_info_map);
    }

    service_broadcast_req_body::service_broadcast_req_body(const service_broadcast_req_body& other220) {
        node_service_info_map = other220.node_service_info_map;
    }
    service_broadcast_req_body& service_broadcast_req_body::operator=(const service_broadcast_req_body& other221) {
        node_service_info_map = other221.node_service_info_map;
        return *this;
    }
    void service_broadcast_req_body::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "service_broadcast_req_body(";
        out << "node_service_info_map=" << to_string(node_service_info_map);
        out << ")";
    }


    service_broadcast_req::~service_broadcast_req() throw() {
    }


    void service_broadcast_req::__set_body(const service_broadcast_req_body& val) {
        this->body = val;
    }
    std::ostream& operator<<(std::ostream& out, const service_broadcast_req& obj)
    {
        obj.printTo(out);
        return out;
    }


    uint32_t service_broadcast_req::read(::apache::thrift::protocol::TProtocol* iprot) {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid)
            {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                        xfer += this->body.read(iprot);
                        this->__isset.body = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                    default:
                        xfer += iprot->skip(ftype);
                        break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t service_broadcast_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("service_broadcast_req");

        xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRUCT, 1);
        xfer += this->body.write(oprot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(service_broadcast_req &a, service_broadcast_req &b) {
        using ::std::swap;
        swap(a.body, b.body);
        swap(a.__isset, b.__isset);
    }

    service_broadcast_req::service_broadcast_req(const service_broadcast_req& other222) {
        body = other222.body;
        __isset = other222.__isset;
    }
    service_broadcast_req& service_broadcast_req::operator=(const service_broadcast_req& other223) {
        body = other223.body;
        __isset = other223.__isset;
        return *this;
    }
    void service_broadcast_req::printTo(std::ostream& out) const {
        using ::apache::thrift::to_string;
        out << "service_broadcast_req(";
        out << "body=" << to_string(body);
        out << ")";
    }

} // namespace
