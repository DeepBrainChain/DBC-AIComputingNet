/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vm_task_result_TYPES_H
#define vm_task_result_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <functional>
// #include <memory>
#include "network/protocol/protocol.h"
#include "network/protocol/service_message.h"
#include "util/TToString.h"


namespace dbc {

class vm_task_thread_result;

typedef struct _vm_task_thread_result__isset {
  _vm_task_thread_result__isset() : vm_local_ip(false) {}
  bool vm_local_ip :1;
} _vm_task_thread_result__isset;

class vm_task_thread_result : public virtual ::apache::thrift::TMsgBase {
 public:

  vm_task_thread_result(const vm_task_thread_result&);
  vm_task_thread_result& operator=(const vm_task_thread_result&);
  vm_task_thread_result() noexcept
                        : domain_name(),
                          operation(0),
                          result_code(0),
                          result_message(),
                          vm_local_ip() {
  }

  virtual ~vm_task_thread_result() noexcept;
  std::string domain_name;
  int32_t operation;
  int32_t result_code;
  std::string result_message;
  std::string vm_local_ip;

  _vm_task_thread_result__isset __isset;

  void __set_domain_name(const std::string& val);

  void __set_operation(const int32_t val);

  void __set_result_code(const int32_t val);

  void __set_result_message(const std::string& val);

  void __set_vm_local_ip(const std::string& val);

  bool operator == (const vm_task_thread_result & rhs) const
  {
    if (!(domain_name == rhs.domain_name))
      return false;
    if (!(operation == rhs.operation))
      return false;
    if (!(result_code == rhs.result_code))
      return false;
    if (!(result_message == rhs.result_message))
      return false;
    if (__isset.vm_local_ip != rhs.__isset.vm_local_ip)
      return false;
    else if (__isset.vm_local_ip && !(vm_local_ip == rhs.vm_local_ip))
      return false;
    return true;
  }
  bool operator != (const vm_task_thread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vm_task_thread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(vm_task_thread_result &a, vm_task_thread_result &b);

std::ostream& operator<<(std::ostream& out, const vm_task_thread_result& obj);

} // namespace

#endif
