/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "peers_db_types.h"

#include <algorithm>
#include <ostream>

namespace dbc {


db_peer_candidate::~db_peer_candidate() throw() {
}


void db_peer_candidate::__set_ip(const std::string& val) {
  this->ip = val;
}

void db_peer_candidate::__set_port(const int16_t val) {
  this->port = val;
}

void db_peer_candidate::__set_net_state(const int8_t val) {
  this->net_state = val;
}

void db_peer_candidate::__set_reconn_cnt(const int32_t val) {
  this->reconn_cnt = val;
}

void db_peer_candidate::__set_last_conn_tm(const int64_t val) {
  this->last_conn_tm = val;
}

void db_peer_candidate::__set_score(const int32_t val) {
  this->score = val;
}

void db_peer_candidate::__set_node_id(const std::string& val) {
  this->node_id = val;
}

void db_peer_candidate::__set_node_type(const int8_t val) {
  this->node_type = val;
}
std::ostream& operator<<(std::ostream& out, const db_peer_candidate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t db_peer_candidate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ip = false;
  bool isset_port = false;
  bool isset_net_state = false;
  bool isset_reconn_cnt = false;
  bool isset_last_conn_tm = false;
  bool isset_score = false;
  bool isset_node_id = false;
  bool isset_node_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          isset_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          isset_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->net_state);
          isset_net_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reconn_cnt);
          isset_reconn_cnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_conn_tm);
          isset_last_conn_tm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->score);
          isset_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          isset_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->node_type);
          isset_node_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_net_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reconn_cnt)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_conn_tm)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_score)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_node_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_node_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t db_peer_candidate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("db_peer_candidate");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("net_state", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->net_state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reconn_cnt", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->reconn_cnt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_conn_tm", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->last_conn_tm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->node_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("node_type", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->node_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(db_peer_candidate &a, db_peer_candidate &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.net_state, b.net_state);
  swap(a.reconn_cnt, b.reconn_cnt);
  swap(a.last_conn_tm, b.last_conn_tm);
  swap(a.score, b.score);
  swap(a.node_id, b.node_id);
  swap(a.node_type, b.node_type);
}

db_peer_candidate::db_peer_candidate(const db_peer_candidate& other0) {
  ip = other0.ip;
  port = other0.port;
  net_state = other0.net_state;
  reconn_cnt = other0.reconn_cnt;
  last_conn_tm = other0.last_conn_tm;
  score = other0.score;
  node_id = other0.node_id;
  node_type = other0.node_type;
}
db_peer_candidate& db_peer_candidate::operator=(const db_peer_candidate& other1) {
  ip = other1.ip;
  port = other1.port;
  net_state = other1.net_state;
  reconn_cnt = other1.reconn_cnt;
  last_conn_tm = other1.last_conn_tm;
  score = other1.score;
  node_id = other1.node_id;
  node_type = other1.node_type;
  return *this;
}
void db_peer_candidate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "db_peer_candidate(";
  out << "ip=" << to_string(ip);
  out << ", " << "port=" << to_string(port);
  out << ", " << "net_state=" << to_string(net_state);
  out << ", " << "reconn_cnt=" << to_string(reconn_cnt);
  out << ", " << "last_conn_tm=" << to_string(last_conn_tm);
  out << ", " << "score=" << to_string(score);
  out << ", " << "node_id=" << to_string(node_id);
  out << ", " << "node_type=" << to_string(node_type);
  out << ")";
}

} // namespace
