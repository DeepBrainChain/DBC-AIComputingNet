/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef snapshotinfo_TYPES_H
#define snapshotinfo_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <thrift/stdcxx.h>

#include "network/protocol/protocol.h"
#include "network/protocol/service_message.h"
#include "util/TToString.h"

namespace dbc
{

    class snapshotDiskInfo;

    class snapshotInfo;

    typedef struct _snapshotDiskInfo__isset
    {
        _snapshotDiskInfo__isset() : source_file(false) {}
        bool source_file : 1;
    } _snapshotDiskInfo__isset;

    class snapshotDiskInfo : public virtual ::apache::thrift::TBase
    {
    public:
        snapshotDiskInfo(const snapshotDiskInfo &);
        snapshotDiskInfo &operator=(const snapshotDiskInfo &);
        snapshotDiskInfo() : name(), snapshot(), driver_type(), source_file()
        {
        }

        virtual ~snapshotDiskInfo() throw();
        std::string name;
        std::string snapshot;
        std::string driver_type;
        std::string source_file;

        _snapshotDiskInfo__isset __isset;

        void __set_name(const std::string &val);

        void __set_snapshot(const std::string &val);

        void __set_driver_type(const std::string &val);

        void __set_source_file(const std::string &val);

        bool operator==(const snapshotDiskInfo &rhs) const
        {
            if (!(name == rhs.name))
                return false;
            if (!(snapshot == rhs.snapshot))
                return false;
            if (!(driver_type == rhs.driver_type))
                return false;
            if (__isset.source_file != rhs.__isset.source_file)
                return false;
            else if (__isset.source_file && !(source_file == rhs.source_file))
                return false;
            return true;
        }
        bool operator!=(const snapshotDiskInfo &rhs) const
        {
            return !(*this == rhs);
        }

        bool operator<(const snapshotDiskInfo &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        virtual void printTo(std::ostream &out) const;
    };

    void swap(snapshotDiskInfo &a, snapshotDiskInfo &b);

    std::ostream &operator<<(std::ostream &out, const snapshotDiskInfo &obj);

    typedef struct _snapshotInfo__isset
    {
        _snapshotInfo__isset() : state(false), creationTime(false), disks(false), error_code(false), error_message(false) {}
        bool state : 1;
        bool creationTime : 1;
        bool disks : 1;
        bool error_code : 1;
        bool error_message : 1;
    } _snapshotInfo__isset;

    class snapshotInfo : public virtual ::apache::thrift::TBase
    {
    public:
        snapshotInfo(const snapshotInfo &);
        snapshotInfo &operator=(const snapshotInfo &);
        snapshotInfo() : name(), description(), state(), creationTime(0), error_code(0), error_message()
        {
        }

        virtual ~snapshotInfo() throw();
        std::string name;
        std::string description;
        std::string state;
        int64_t creationTime;
        std::vector<snapshotDiskInfo> disks;
        int32_t error_code;
        std::string error_message;

        _snapshotInfo__isset __isset;

        void __set_name(const std::string &val);

        void __set_description(const std::string &val);

        void __set_state(const std::string &val);

        void __set_creationTime(const int64_t val);

        void __set_disks(const std::vector<snapshotDiskInfo> &val);

        void __set_error_code(const int32_t val);

        void __set_error_message(const std::string &val);

        bool operator==(const snapshotInfo &rhs) const
        {
            if (!(name == rhs.name))
                return false;
            if (!(description == rhs.description))
                return false;
            if (__isset.state != rhs.__isset.state)
                return false;
            else if (__isset.state && !(state == rhs.state))
                return false;
            if (__isset.creationTime != rhs.__isset.creationTime)
                return false;
            else if (__isset.creationTime && !(creationTime == rhs.creationTime))
                return false;
            if (__isset.disks != rhs.__isset.disks)
                return false;
            else if (__isset.disks && !(disks == rhs.disks))
                return false;
            if (__isset.error_code != rhs.__isset.error_code)
                return false;
            else if (__isset.error_code && !(error_code == rhs.error_code))
                return false;
            if (__isset.error_message != rhs.__isset.error_message)
                return false;
            else if (__isset.error_message && !(error_message == rhs.error_message))
                return false;
            return true;
        }
        bool operator!=(const snapshotInfo &rhs) const
        {
            return !(*this == rhs);
        }

        bool operator<(const snapshotInfo &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol *iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        virtual void printTo(std::ostream &out) const;
    };

    void swap(snapshotInfo &a, snapshotInfo &b);

    std::ostream &operator<<(std::ostream &out, const snapshotInfo &obj);

} // namespace

#endif
