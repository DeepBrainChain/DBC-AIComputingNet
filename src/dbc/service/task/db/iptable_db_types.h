/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TASK_IPTABLE_DB_TYPES_H
#define TASK_IPTABLE_DB_TYPES_H

#include <iosfwd>
#include "network/protocol/protocol.h"
#include "network/protocol/service_message.h"
#include "util/TToString.h"

namespace dbc {

    class task_iptable;

    typedef struct _task_iptable__isset {
        _task_iptable__isset() : host_ip(false), vm_local_ip(false), ssh_port(false), rdp_port(false), custom_port(false) {}
        bool host_ip :1;
        bool vm_local_ip :1;
        bool ssh_port :1;
        bool rdp_port :1;
        bool custom_port :1;
    } _task_iptable__isset;

    class task_iptable : public virtual ::apache::thrift::TBase {
    public:

        task_iptable(const task_iptable&);
        task_iptable& operator=(const task_iptable&);
        task_iptable() : task_id(), host_ip(), vm_local_ip(), ssh_port(), rdp_port() {
        }

        virtual ~task_iptable() throw();
        std::string task_id;
        std::string host_ip;
        std::string vm_local_ip;
        std::string ssh_port;
        std::string rdp_port;
        std::vector<std::string>  custom_port;

        _task_iptable__isset __isset;

        void __set_task_id(const std::string& val);

        void __set_host_ip(const std::string& val);

        void __set_vm_local_ip(const std::string& val);

        void __set_ssh_port(const std::string& val);

        void __set_rdp_port(const std::string& val);

        void __set_custom_port(const std::vector<std::string> & val);

        bool operator == (const task_iptable & rhs) const
        {
            if (!(task_id == rhs.task_id))
                return false;
            if (__isset.host_ip != rhs.__isset.host_ip)
                return false;
            else if (__isset.host_ip && !(host_ip == rhs.host_ip))
                return false;
            if (__isset.vm_local_ip != rhs.__isset.vm_local_ip)
                return false;
            else if (__isset.vm_local_ip && !(vm_local_ip == rhs.vm_local_ip))
                return false;
            if (__isset.ssh_port != rhs.__isset.ssh_port)
                return false;
            else if (__isset.ssh_port && !(ssh_port == rhs.ssh_port))
                return false;
            if (__isset.rdp_port != rhs.__isset.rdp_port)
                return false;
            else if (__isset.rdp_port && !(rdp_port == rhs.rdp_port))
                return false;
            if (__isset.custom_port != rhs.__isset.custom_port)
                return false;
            else if (__isset.custom_port && !(custom_port == rhs.custom_port))
                return false;
            return true;
        }
        bool operator != (const task_iptable &rhs) const {
            return !(*this == rhs);
        }

        bool operator < (const task_iptable & ) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        virtual void printTo(std::ostream& out) const;
    };

    void swap(task_iptable &a, task_iptable &b);

    std::ostream& operator<<(std::ostream& out, const task_iptable& obj);

} // namespace

#endif
