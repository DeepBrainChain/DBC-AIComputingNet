/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef network_TYPES_H
#define network_TYPES_H

#include <iosfwd>

// #include <thrift/Thrift.h>
// #include <thrift/TApplicationException.h>
// #include <thrift/TBase.h>
// #include <thrift/protocol/TProtocol.h>
// #include <thrift/transport/TTransport.h>

// #include <thrift/stdcxx.h>

#include "network/protocol/protocol.h"
#include "network/protocol/service_message.h"
#include "util/TToString.h"

namespace dbc {

class networkInfo;


class networkInfo : public virtual ::apache::thrift::TBase {
 public:

  networkInfo(const networkInfo&);
  networkInfo& operator=(const networkInfo&);
  networkInfo() : networkId(), bridgeName(), vxlanName(), vxlanVni(), ipCidr(), ipStart(), ipEnd() {
  }

  virtual ~networkInfo() throw();
  std::string networkId;
  std::string bridgeName;
  std::string vxlanName;
  std::string vxlanVni;
  std::string ipCidr;
  std::string ipStart;
  std::string ipEnd;

  void __set_networkId(const std::string& val);

  void __set_bridgeName(const std::string& val);

  void __set_vxlanName(const std::string& val);

  void __set_vxlanVni(const std::string& val);

  void __set_ipCidr(const std::string& val);

  void __set_ipStart(const std::string& val);

  void __set_ipEnd(const std::string& val);

  bool operator == (const networkInfo & rhs) const
  {
    if (!(networkId == rhs.networkId))
      return false;
    if (!(bridgeName == rhs.bridgeName))
      return false;
    if (!(vxlanName == rhs.vxlanName))
      return false;
    if (!(vxlanVni == rhs.vxlanVni))
      return false;
    if (!(ipCidr == rhs.ipCidr))
      return false;
    if (!(ipStart == rhs.ipStart))
      return false;
    if (!(ipEnd == rhs.ipEnd))
      return false;
    return true;
  }
  bool operator != (const networkInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const networkInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(networkInfo &a, networkInfo &b);

std::ostream& operator<<(std::ostream& out, const networkInfo& obj);

} // namespace

#endif
