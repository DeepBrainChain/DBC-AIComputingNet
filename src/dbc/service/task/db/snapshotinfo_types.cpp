/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "snapshotinfo_types.h"

#include <algorithm>
#include <ostream>

// #include <thrift/TToString.h>

namespace dbc
{

    snapshotDiskInfo::~snapshotDiskInfo() throw()
    {
    }

    void snapshotDiskInfo::__set_name(const std::string &val)
    {
        this->name = val;
    }

    void snapshotDiskInfo::__set_snapshot(const std::string &val)
    {
        this->snapshot = val;
    }

    void snapshotDiskInfo::__set_driver_type(const std::string &val)
    {
        this->driver_type = val;
    }

    void snapshotDiskInfo::__set_source_file(const std::string &val)
    {
        this->source_file = val;
        __isset.source_file = true;
    }
    std::ostream &operator<<(std::ostream &out, const snapshotDiskInfo &obj)
    {
        obj.printTo(out);
        return out;
    }

    uint32_t snapshotDiskInfo::read(::apache::thrift::protocol::TProtocol *iprot)
    {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_name = false;
        bool isset_snapshot = false;
        bool isset_driver_type = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP)
            {
                break;
            }
            switch (fid)
            {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->name);
                    isset_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 2:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->snapshot);
                    isset_snapshot = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 3:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->driver_type);
                    isset_driver_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 4:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->source_file);
                    this->__isset.source_file = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            default:
                xfer += iprot->skip(ftype);
                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_name)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_snapshot)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_driver_type)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t snapshotDiskInfo::write(::apache::thrift::protocol::TProtocol *oprot) const
    {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("snapshotDiskInfo");

        xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->name);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("snapshot", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->snapshot);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("driver_type", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->driver_type);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.source_file)
        {
            xfer += oprot->writeFieldBegin("source_file", ::apache::thrift::protocol::T_STRING, 4);
            xfer += oprot->writeString(this->source_file);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(snapshotDiskInfo &a, snapshotDiskInfo &b)
    {
        using ::std::swap;
        swap(a.name, b.name);
        swap(a.snapshot, b.snapshot);
        swap(a.driver_type, b.driver_type);
        swap(a.source_file, b.source_file);
        swap(a.__isset, b.__isset);
    }

    snapshotDiskInfo::snapshotDiskInfo(const snapshotDiskInfo &other0)
    {
        name = other0.name;
        snapshot = other0.snapshot;
        driver_type = other0.driver_type;
        source_file = other0.source_file;
        __isset = other0.__isset;
    }
    snapshotDiskInfo &snapshotDiskInfo::operator=(const snapshotDiskInfo &other1)
    {
        name = other1.name;
        snapshot = other1.snapshot;
        driver_type = other1.driver_type;
        source_file = other1.source_file;
        __isset = other1.__isset;
        return *this;
    }
    void snapshotDiskInfo::printTo(std::ostream &out) const
    {
        using ::apache::thrift::to_string;
        out << "snapshotDiskInfo(";
        out << "name=" << to_string(name);
        out << ", "
            << "snapshot=" << to_string(snapshot);
        out << ", "
            << "driver_type=" << to_string(driver_type);
        out << ", "
            << "source_file=";
        (__isset.source_file ? (out << to_string(source_file)) : (out << "<null>"));
        out << ")";
    }

    snapshotInfo::~snapshotInfo() throw()
    {
    }

    void snapshotInfo::__set_name(const std::string &val)
    {
        this->name = val;
    }

    void snapshotInfo::__set_description(const std::string &val)
    {
        this->description = val;
    }

    void snapshotInfo::__set_state(const std::string &val)
    {
        this->state = val;
        __isset.state = true;
    }

    void snapshotInfo::__set_creationTime(const int64_t val)
    {
        this->creationTime = val;
        __isset.creationTime = true;
    }

    void snapshotInfo::__set_disks(const std::vector<snapshotDiskInfo> &val)
    {
        this->disks = val;
        __isset.disks = true;
    }

    void snapshotInfo::__set_error_code(const int32_t val)
    {
        this->error_code = val;
        __isset.error_code = true;
    }

    void snapshotInfo::__set_error_message(const std::string &val)
    {
        this->error_message = val;
        __isset.error_message = true;
    }
    std::ostream &operator<<(std::ostream &out, const snapshotInfo &obj)
    {
        obj.printTo(out);
        return out;
    }

    uint32_t snapshotInfo::read(::apache::thrift::protocol::TProtocol *iprot)
    {

        ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;

        bool isset_name = false;
        bool isset_description = false;

        while (true)
        {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP)
            {
                break;
            }
            switch (fid)
            {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->name);
                    isset_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 2:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->description);
                    isset_description = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 3:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->state);
                    this->__isset.state = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 4:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->creationTime);
                    this->__isset.creationTime = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 5:
                if (ftype == ::apache::thrift::protocol::T_LIST)
                {
                    {
                        this->disks.clear();
                        uint32_t _size2;
                        ::apache::thrift::protocol::TType _etype5;
                        xfer += iprot->readListBegin(_etype5, _size2);
                        this->disks.resize(_size2);
                        uint32_t _i6;
                        for (_i6 = 0; _i6 < _size2; ++_i6)
                        {
                            xfer += this->disks[_i6].read(iprot);
                        }
                        xfer += iprot->readListEnd();
                    }
                    this->__isset.disks = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 6:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    xfer += iprot->readI32(this->error_code);
                    this->__isset.error_code = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 7:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->error_message);
                    this->__isset.error_message = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }
                break;
            default:
                xfer += iprot->skip(ftype);
                break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        if (!isset_name)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        if (!isset_description)
            throw TProtocolException(TProtocolException::INVALID_DATA);
        return xfer;
    }

    uint32_t snapshotInfo::write(::apache::thrift::protocol::TProtocol *oprot) const
    {
        uint32_t xfer = 0;
        ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
        xfer += oprot->writeStructBegin("snapshotInfo");

        xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->name);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->description);
        xfer += oprot->writeFieldEnd();

        if (this->__isset.state)
        {
            xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 3);
            xfer += oprot->writeString(this->state);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.creationTime)
        {
            xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_I64, 4);
            xfer += oprot->writeI64(this->creationTime);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.disks)
        {
            xfer += oprot->writeFieldBegin("disks", ::apache::thrift::protocol::T_LIST, 5);
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->disks.size()));
                std::vector<snapshotDiskInfo>::const_iterator _iter7;
                for (_iter7 = this->disks.begin(); _iter7 != this->disks.end(); ++_iter7)
                {
                    xfer += (*_iter7).write(oprot);
                }
                xfer += oprot->writeListEnd();
            }
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.error_code)
        {
            xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 6);
            xfer += oprot->writeI32(this->error_code);
            xfer += oprot->writeFieldEnd();
        }
        if (this->__isset.error_message)
        {
            xfer += oprot->writeFieldBegin("error_message", ::apache::thrift::protocol::T_STRING, 7);
            xfer += oprot->writeString(this->error_message);
            xfer += oprot->writeFieldEnd();
        }
        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(snapshotInfo &a, snapshotInfo &b)
    {
        using ::std::swap;
        swap(a.name, b.name);
        swap(a.description, b.description);
        swap(a.state, b.state);
        swap(a.creationTime, b.creationTime);
        swap(a.disks, b.disks);
        swap(a.error_code, b.error_code);
        swap(a.error_message, b.error_message);
        swap(a.__isset, b.__isset);
    }

    snapshotInfo::snapshotInfo(const snapshotInfo &other8)
    {
        name = other8.name;
        description = other8.description;
        state = other8.state;
        creationTime = other8.creationTime;
        disks = other8.disks;
        error_code = other8.error_code;
        error_message = other8.error_message;
        __isset = other8.__isset;
    }
    snapshotInfo &snapshotInfo::operator=(const snapshotInfo &other9)
    {
        name = other9.name;
        description = other9.description;
        state = other9.state;
        creationTime = other9.creationTime;
        disks = other9.disks;
        error_code = other9.error_code;
        error_message = other9.error_message;
        __isset = other9.__isset;
        return *this;
    }
    void snapshotInfo::printTo(std::ostream &out) const
    {
        using ::apache::thrift::to_string;
        out << "snapshotInfo(";
        out << "name=" << to_string(name);
        out << ", "
            << "description=" << to_string(description);
        out << ", "
            << "state=";
        (__isset.state ? (out << to_string(state)) : (out << "<null>"));
        out << ", "
            << "creationTime=";
        (__isset.creationTime ? (out << to_string(creationTime)) : (out << "<null>"));
        out << ", "
            << "disks=";
        (__isset.disks ? (out << to_string(disks)) : (out << "<null>"));
        out << ", "
            << "error_code=";
        (__isset.error_code ? (out << to_string(error_code)) : (out << "<null>"));
        out << ", "
            << "error_message=";
        (__isset.error_message ? (out << to_string(error_message)) : (out << "<null>"));
        out << ")";
    }

} // namespace
